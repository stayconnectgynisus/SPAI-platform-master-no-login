{"ast":null,"code":"var _jsxFileName = \"E:\\\\Hammad\\\\FrontEnd\\\\ClientApp\\\\src\\\\components\\\\FeatureImportanceGraph\\\\FeatureImportanceGraph.js\";\nimport React from \"react\";\nimport \"./featureimportance.style.scss\";\nimport { extendMoment } from \"moment-range\";\nimport { Chart } from \"primereact/chart\";\nimport { Calendar } from \"primereact/calendar\";\nimport Moment from \"moment\";\nimport * as Highcharts from 'highcharts';\nimport HighchartsReact from 'highcharts-react-official';\nimport env from \"../../evn\";\nimport { MultiSelect } from \"primereact/multiselect\";\nimport APIHelper from \"../../utils/apiHelper\"; // Load module after Highcharts is loaded\n\nrequire('highcharts/modules/exporting')(Highcharts);\n\nconst moment = extendMoment(Moment);\nconst BASE_URL = \"/LabTestResult\";\n\nclass FeatureImportanceGraph extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: [],\n      mappedData: {},\n      filterData: null,\n      times: [],\n      fromFilter: null,\n      toFilter: null,\n      patientMRN: null,\n      conditionType: null,\n      conditionDescriptions: [],\n      selectedDescriptions: [],\n      isNoData: true\n    };\n  }\n\n  async componentDidUpdate(prevProps) {\n    // if data change\n    if (prevProps.data !== this.props.data) {\n      await this.setState({\n        isNoData: true,\n        data: this.props.data,\n        conditionType: this.props.data[0].ConditionType,\n        patientMRN: this.props.data[0].PatientMRN,\n        conditionDescriptions: [],\n        selectedDescriptions: []\n      });\n      setTimeout(() => {\n        this.getData();\n      }, 100);\n    }\n  }\n\n  getOptions(title) {\n    var marker = {\n      fillColor: 'red',\n      states: {\n        hover: {\n          fillColor: 'red',\n          lineColor: 'red'\n        }\n      }\n    };\n    var result = this.state.data.filter(x => x.ConditionDescription == title),\n        finalResult = (result || []).map(x => {\n      if (!x.value) x.Value = x.Value || 0;\n\n      if (x.minRange && x.Value < x.minRange) {\n        return {\n          y: x.Value,\n          marker: marker\n        };\n      }\n\n      if (x.maxRange && x.Value > x.maxRange) {\n        return {\n          y: x.Value,\n          marker: marker\n        };\n      }\n\n      return {\n        y: x.Value,\n        marker: {\n          fillColor: 'green',\n          states: {\n            hover: {\n              fillColor: 'green',\n              lineColor: 'green'\n            }\n          }\n        }\n      };\n    }),\n        categories = (result || []).map(x => {\n      return moment(x.Insert_timestamp).format(\"MM/DD HH:mm\").toString();\n    }),\n        totalCount = this.state.selectedDescriptions.length,\n        color = (this.state.conditionDescriptions.find(x => x.title === title) || {}).color;\n    return {\n      chart: {\n        type: 'line',\n        backgroundColor: 'transparent',\n        height: totalCount <= 1 ? 230 * 2 : 230\n      },\n      title: {\n        text: null,\n        style: {\n          color: \"#333333\",\n          fontSize: \"13.5px\"\n        }\n      },\n      tooltip: {\n        formatter: function () {\n          console.log(this); //return 'Extra data: <b>' + this.point.myData + '</b>';\n\n          var f = this.series.color;\n\n          if (this.point.marker) {\n            f = this.point.marker.fillColor;\n          }\n\n          return '<span style=\"font-size:10px;\">' + this.x + '</span><br/><span style=\"color:' + f + '\">\\u25CF</span> ' + this.series.name + ': <b>' + this.point.y;\n        } //pointFormat: ' <b>{point.y}</b>'\n\n      },\n      plotOptions: {\n        line: {\n          dataLabels: {\n            enabled: true\n          },\n          enableMouseTracking: true\n        }\n      },\n      exporting: {\n        enabled: true\n      },\n      credits: {\n        enabled: false\n      },\n      xAxis: {\n        categories: categories\n      },\n      yAxis: {\n        title: {\n          text: title\n        }\n      },\n      series: [{\n        name: title,\n        showInLegend: true,\n        color: color || '#ef5d22',\n        data: finalResult && finalResult.length > 0 ? finalResult : []\n      }]\n    };\n  }\n\n  getData() {\n    var actualResulColor = [\"#173057\", \"#543b74\", \"#92407d\", \"#cd4975\", \"#f4625e\", \"#fe8e3a\", \"#fec106\", \"#a3b5d4\", \"#b9c6dd\", \"#cdd5e7\", \"#dfecf4\", \"#ffffff\"];\n    if (!this.state.conditionType || !this.state.patientMRN) return;\n    var url = BASE_URL + '?patientMRN=' + this.state.patientMRN + '&conditionType=' + this.state.conditionType;\n    APIHelper(url).then(data => {\n      if (!data || !data.length) return;\n      this.setState({\n        selectedDescriptions: []\n      });\n      var unique = [],\n          i = 0;\n      data.map(d => {\n        if (!unique.find(x => x.title == d.ConditionDescription)) {\n          unique.push({\n            title: d.ConditionDescription,\n            color: '#333' //actualResulColor[i]\n\n          });\n\n          if (i <= 1) {\n            this.setState(prevState => ({\n              selectedDescriptions: [...prevState.selectedDescriptions, d.ConditionDescription]\n            }));\n          }\n\n          i++;\n        }\n      });\n      this.setState({\n        conditionDescriptions: unique,\n        data: data,\n        isNoData: false\n      });\n    }).catch(err => {\n      console.log(\"FeatureImportance err :\", err);\n    });\n  }\n\n  mappingData(data) {\n    // sort the data according to PredictionDate\n    data.sort((a, b) => new Date(a.PredictionDate) - new Date(b.PredictionDate));\n    console.log('Mapped Data', data); // mapped object base on the data\n\n    const mapped = {\n      labels: data.map(d => moment(d.PredictionDate).format(\"MM/DD HH:mm\").toString()),\n      datasets: [{\n        label: `${data[0].ConditionType}-${data[0].PatientMRN}`,\n        data: data.map(d => d.Probability),\n        fill: false,\n        backgroundColor: \"#ef5d22\",\n        borderColor: \"#ef5d22\"\n      }]\n    };\n    return mapped;\n  }\n\n  onFilterChange(e, filter) {\n    // set filter base on the filter name [filter] = dynamic name\n    this.setState({\n      [filter]: e.value\n    });\n    setTimeout(() => {\n      // get filters and data\n      const {\n        data,\n        fromFilter,\n        toFilter\n      } = this.state; // if data and filters exist\n\n      if (data.length && fromFilter && toFilter) {\n        // get all the data in the filters dates range (fromData toDate)\n        const fromDate = new Date(fromFilter),\n              toDate = new Date(toFilter),\n              filterRange = moment().range(fromDate, toDate);\n        const filterDates = data.filter(d => filterRange.contains(moment(d.PredictionDate))).sort((a, b) => new Date(a.PredictionDate) - new Date(b.PredictionDate)); // mapping the data\n\n        const filterData = {\n          labels: filterDates.map(d => moment(d.PredictionDate).format(\"MM/DD HH:mm\").toString()),\n          datasets: [{\n            label: `${data[0].ConditionType}-${data[0].PatientMRN}`,\n            data: filterDates.map(d => d.Probability),\n            fill: false,\n            backgroundColor: \"#ef5d22\",\n            borderColor: \"#ef5d22\"\n          }]\n        }; // set filtered data\n\n        this.setState({\n          filterData: filterData\n        });\n      }\n    });\n  }\n\n  pickerTemplate(option) {\n    const onFilterChange = e => {\n      this.setState({\n        [option.filter]: e.value\n      });\n    };\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"p-clearfix\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 275,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Calendar, {\n      value: this.state[option.filter],\n      onChange: onFilterChange,\n      timeOnly: true,\n      hourFormat: \"12\",\n      placeholder: option.label,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 276,\n        columnNumber: 9\n      }\n    }));\n  }\n\n  render() {\n    const {\n      filterData,\n      mappedData\n    } = this.state;\n    console.log(filterData, mappedData);\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"feature-importance exposure-over-time-container gyn-table-container\",\n      style: {\n        height: 'auto'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 292,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"header\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 294,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 295,\n        columnNumber: 11\n      }\n    }, \"Lab tests trends over time (per Condition-Patient)\"), /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        display: 'flex'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 296,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(MultiSelect, {\n      value: this.state.selectedDescriptions,\n      options: this.state.conditionDescriptions,\n      onChange: e => this.setState({\n        selectedDescriptions: e.value\n      }),\n      style: {\n        minWidth: \"250px\",\n        position: \"relative\",\n        marginRight: '15px'\n      },\n      filter: true,\n      maxSelectedLabels: 2,\n      filterPlaceholder: \"Search\",\n      placeholder: \"Choose\",\n      optionLabel: \"title\",\n      optionValue: \"title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 297,\n        columnNumber: 13\n      }\n    }))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"content\",\n      style: {\n        minHeight: 495\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 315,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        width: '100%',\n        clear: 'both'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 317,\n        columnNumber: 11\n      }\n    }, this.state.isNoData && /*#__PURE__*/React.createElement(\"h3\", {\n      style: {\n        fontWeight: 400\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 319,\n        columnNumber: 38\n      }\n    }, \"No records found\"), this.state.selectedDescriptions.map((s, i) => /*#__PURE__*/React.createElement(\"div\", {\n      key: i,\n      style: {\n        position: 'relative'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 322,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(HighchartsReact, {\n      highcharts: Highcharts,\n      options: this.getOptions(s),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 323,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      key: i,\n      style: {\n        clear: 'both',\n        position: 'absolute',\n        right: '0',\n        bottom: '17px'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 328,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      style: {\n        display: 'inline-flex'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 329,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(\"svg\", {\n      xmlns: \"http://www.w3.org/2000/svg\",\n      style: {\n        display: 'inline-block',\n        width: '10px',\n        height: '10px'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 330,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"circle\", {\n      cx: \"5\",\n      cy: \"5\",\n      r: \"5\",\n      fill: \"green\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 331,\n        columnNumber: 23\n      }\n    })), /*#__PURE__*/React.createElement(\"span\", {\n      style: {\n        position: \"relative\",\n        top: \"-4px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 333,\n        columnNumber: 21\n      }\n    }, \"\\xA0In Range\\xA0\\xA0\")), /*#__PURE__*/React.createElement(\"span\", {\n      style: {\n        display: 'inline-flex'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 335,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(\"svg\", {\n      xmlns: \"http://www.w3.org/2000/svg\",\n      style: {\n        display: 'inline-block',\n        width: '10px',\n        height: '10px'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 336,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"circle\", {\n      cx: \"5\",\n      cy: \"5\",\n      r: \"5\",\n      fill: \"red\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 337,\n        columnNumber: 23\n      }\n    })), /*#__PURE__*/React.createElement(\"span\", {\n      style: {\n        position: \"relative\",\n        top: \"-4px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 339,\n        columnNumber: 21\n      }\n    }, \"\\xA0Out Range\"))))))));\n  }\n\n}\n\nFeatureImportanceGraph.navigationOptions = {\n  title: null\n};\nexport default FeatureImportanceGraph;","map":{"version":3,"sources":["E:/Hammad/FrontEnd/ClientApp/src/components/FeatureImportanceGraph/FeatureImportanceGraph.js"],"names":["React","extendMoment","Chart","Calendar","Moment","Highcharts","HighchartsReact","env","MultiSelect","APIHelper","require","moment","BASE_URL","FeatureImportanceGraph","Component","constructor","props","state","data","mappedData","filterData","times","fromFilter","toFilter","patientMRN","conditionType","conditionDescriptions","selectedDescriptions","isNoData","componentDidUpdate","prevProps","setState","ConditionType","PatientMRN","setTimeout","getData","getOptions","title","marker","fillColor","states","hover","lineColor","result","filter","x","ConditionDescription","finalResult","map","value","Value","minRange","y","maxRange","categories","Insert_timestamp","format","toString","totalCount","length","color","find","chart","type","backgroundColor","height","text","style","fontSize","tooltip","formatter","console","log","f","series","point","name","plotOptions","line","dataLabels","enabled","enableMouseTracking","exporting","credits","xAxis","yAxis","showInLegend","actualResulColor","url","then","unique","i","d","push","prevState","catch","err","mappingData","sort","a","b","Date","PredictionDate","mapped","labels","datasets","label","Probability","fill","borderColor","onFilterChange","e","fromDate","toDate","filterRange","range","filterDates","contains","pickerTemplate","option","render","display","minWidth","position","marginRight","minHeight","width","clear","fontWeight","s","right","bottom","top","navigationOptions"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport \"./featureimportance.style.scss\";\nimport { extendMoment } from \"moment-range\";\nimport { Chart } from \"primereact/chart\";\nimport { Calendar } from \"primereact/calendar\";\nimport Moment from \"moment\";\nimport * as Highcharts from 'highcharts';\nimport HighchartsReact from 'highcharts-react-official';\nimport env from \"../../evn\";\nimport { MultiSelect } from \"primereact/multiselect\";\nimport APIHelper from \"../../utils/apiHelper\";\n// Load module after Highcharts is loaded\nrequire('highcharts/modules/exporting')(Highcharts);\nconst moment = extendMoment(Moment);\nconst BASE_URL = \"/LabTestResult\";\n\n\nclass FeatureImportanceGraph extends React.Component {\n  static navigationOptions = { title: null };\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: [],\n      mappedData: {},\n      filterData: null,\n      times: [],\n      fromFilter: null,\n      toFilter: null,\n      patientMRN: null,\n      conditionType: null,\n      conditionDescriptions: [],\n      selectedDescriptions: [],\n      isNoData: true\n    };\n  }\n\n  async componentDidUpdate(prevProps) {\n    // if data change\n\n    if (prevProps.data !== this.props.data) {\n\n\n      await this.setState({\n        isNoData: true,\n        data: this.props.data,\n        conditionType: this.props.data[0].ConditionType,\n        patientMRN: this.props.data[0].PatientMRN,\n        conditionDescriptions: [],\n        selectedDescriptions: []\n      });\n      setTimeout(() => {\n        this.getData();\n      }, 100);\n    }\n  }\n\n\n  getOptions(title) {\n    var marker = {\n      fillColor: 'red',\n      states: {\n        hover: {\n          fillColor: 'red',\n          lineColor: 'red'\n        }\n      }\n    };\n    var result = this.state.data.filter((x) => x.ConditionDescription == title),\n      finalResult = (result || []).map((x) => {\n\n        if (!x.value) x.Value = x.Value || 0;\n\n        if (x.minRange && x.Value < x.minRange) {\n          return {\n            y: x.Value,\n            marker: marker\n          }\n        }\n\n        if (x.maxRange && x.Value > x.maxRange) {\n          return {\n            y: x.Value,\n            marker: marker\n          }\n        }\n\n        return {\n          y: x.Value,\n          marker: {\n            fillColor: 'green',\n            states: {\n              hover: {\n                fillColor: 'green',\n                lineColor: 'green'\n              }\n            }\n          }\n        }\n      }),\n      categories = (result || []).map((x) => { return moment(x.Insert_timestamp).format(\"MM/DD HH:mm\").toString() }),\n      totalCount = this.state.selectedDescriptions.length,\n      color = (this.state.conditionDescriptions.find(x => x.title === title) || {}).color;\n\n    return {\n\n      chart: {\n        type: 'line',\n        backgroundColor: 'transparent',\n        height: totalCount <= 1 ? 230 * 2 : 230\n      },\n      title: {\n        text: null,\n        style: { color: \"#333333\", fontSize: \"13.5px\" }\n      },\n      tooltip: {\n        formatter: function () {\n          console.log(this);\n          //return 'Extra data: <b>' + this.point.myData + '</b>';\n          var f = this.series.color;\n          if (this.point.marker) {\n            f = this.point.marker.fillColor;\n          }\n          return '<span style=\"font-size:10px;\">' + this.x + '</span><br/><span style=\"color:' + f + '\">\\u25CF</span> ' + this.series.name + ': <b>' + this.point.y;\n        },\n        //pointFormat: ' <b>{point.y}</b>'\n      },\n      plotOptions: {\n        line: {\n          dataLabels: {\n            enabled: true\n          },\n          enableMouseTracking: true\n        }\n      },\n      exporting: {\n        enabled: true\n      },\n      credits: {\n        enabled: false,\n      },\n      xAxis: {\n        categories: categories\n      },\n      yAxis: {\n        title: {\n          text: title\n        }\n      },\n      series: [{\n        name: title,\n        showInLegend: true,\n        color: color || '#ef5d22',\n        data: finalResult && finalResult.length > 0 ? finalResult : [],\n      }]\n    }\n  }\n\n  getData() {\n    var actualResulColor = [\n      \"#173057\",\n      \"#543b74\",\n      \"#92407d\",\n      \"#cd4975\",\n      \"#f4625e\",\n      \"#fe8e3a\",\n      \"#fec106\",\n      \"#a3b5d4\",\n      \"#b9c6dd\",\n      \"#cdd5e7\",\n      \"#dfecf4\",\n      \"#ffffff\",\n    ]\n\n    if (!this.state.conditionType || !this.state.patientMRN) return;\n\n    var url = BASE_URL + '?patientMRN=' + this.state.patientMRN + '&conditionType=' + this.state.conditionType;\n    APIHelper(url)\n      .then((data) => {\n        if (!data || !data.length) return;\n\n        this.setState({\n          selectedDescriptions: []\n        });\n\n        var unique = [], i = 0;\n        data.map(d => {\n          if (!unique.find((x) => x.title == d.ConditionDescription)) {\n            unique.push({\n              title: d.ConditionDescription,\n              color: '#333'//actualResulColor[i]\n            })\n            if (i <= 1) {\n              this.setState(prevState => ({\n                selectedDescriptions: [...prevState.selectedDescriptions, d.ConditionDescription]\n              }))\n            }\n            i++;\n          }\n\n        });\n        this.setState({ conditionDescriptions: unique, data: data, isNoData: false });\n      })\n      .catch((err) => {\n        console.log(\"FeatureImportance err :\", err);\n      });\n  }\n  mappingData(data) {\n    // sort the data according to PredictionDate\n    data.sort(\n      (a, b) => new Date(a.PredictionDate) - new Date(b.PredictionDate)\n    );\n    console.log('Mapped Data', data)\n    // mapped object base on the data\n    const mapped = {\n      labels: data.map((d) =>\n        moment(d.PredictionDate).format(\"MM/DD HH:mm\").toString()\n      ),\n      datasets: [\n        {\n          label: `${data[0].ConditionType}-${data[0].PatientMRN}`,\n          data: data.map((d) => d.Probability),\n          fill: false,\n          backgroundColor: \"#ef5d22\",\n          borderColor: \"#ef5d22\",\n        },\n      ],\n    };\n    return mapped;\n  }\n\n  onFilterChange(e, filter) {\n    // set filter base on the filter name [filter] = dynamic name\n    this.setState({ [filter]: e.value });\n    setTimeout(() => {\n      // get filters and data\n      const { data, fromFilter, toFilter } = this.state;\n      // if data and filters exist\n      if (data.length && fromFilter && toFilter) {\n        // get all the data in the filters dates range (fromData toDate)\n        const fromDate = new Date(fromFilter),\n          toDate = new Date(toFilter),\n          filterRange = moment().range(fromDate, toDate);\n        const filterDates = data\n          .filter((d) => filterRange.contains(moment(d.PredictionDate)))\n          .sort(\n            (a, b) => new Date(a.PredictionDate) - new Date(b.PredictionDate)\n          );\n        // mapping the data\n        const filterData = {\n          labels: filterDates.map((d) =>\n            moment(d.PredictionDate).format(\"MM/DD HH:mm\").toString()\n          ),\n          datasets: [\n            {\n              label: `${data[0].ConditionType}-${data[0].PatientMRN}`,\n              data: filterDates.map((d) => d.Probability),\n              fill: false,\n              backgroundColor: \"#ef5d22\",\n              borderColor: \"#ef5d22\",\n            },\n          ],\n        };\n        // set filtered data\n        this.setState({ filterData: filterData });\n      }\n    });\n  }\n\n  pickerTemplate(option) {\n    const onFilterChange = (e) => {\n      this.setState({ [option.filter]: e.value });\n    };\n    return (\n      <div className=\"p-clearfix\">\n        <Calendar\n          value={this.state[option.filter]}\n          onChange={onFilterChange}\n          timeOnly={true}\n          hourFormat=\"12\"\n          placeholder={option.label}\n        />\n      </div>\n    );\n  }\n\n  render() {\n    const { filterData, mappedData } = this.state;\n    console.log(filterData, mappedData);\n\n    return (\n      <div className={\"feature-importance exposure-over-time-container gyn-table-container\"} style={{ height: 'auto' }}>\n        {/*DATES FILTERS*/}\n        <div className=\"header\">\n          <h3>Lab tests trends over time (per Condition-Patient)</h3>\n          <div style={{ display: 'flex' }}>\n            <MultiSelect\n              value={this.state.selectedDescriptions}\n              options={this.state.conditionDescriptions}\n              onChange={(e) =>\n                this.setState({ selectedDescriptions: e.value })\n              }\n              style={{ minWidth: \"250px\", position: \"relative\", marginRight: '15px' }}\n              filter={true}\n              maxSelectedLabels={2}\n              filterPlaceholder=\"Search\"\n              placeholder=\"Choose\"\n              optionLabel=\"title\"\n              optionValue=\"title\"\n            />\n          </div>\n        </div>\n\n\n        <div className=\"content\" style={{ minHeight: 495 }}>\n          {/*CHART*/}\n          <div style={{ width: '100%', clear: 'both' }}>\n            {\n              this.state.isNoData && <h3 style={{ fontWeight: 400 }}>No records found</h3>\n            }\n            {this.state.selectedDescriptions.map((s, i) => (\n              <div key={i} style={{position: 'relative'}}>\n                <HighchartsReact\n                  highcharts={Highcharts}\n                  options={this.getOptions(s)}\n\n                />\n                <div key={i} style={{clear: 'both', position: 'absolute', right: '0', bottom: '17px'}}>\n                  <span style={{display: 'inline-flex'}}>\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" style={{ display: 'inline-block', width: '10px', height: '10px'}}>\n                      <circle cx=\"5\" cy=\"5\" r=\"5\" fill=\"green\"></circle>\n                    </svg>\n                    <span style={{ position: \"relative\", top: \"-4px\"}}>&nbsp;In Range&nbsp;&nbsp;</span>\n                  </span>\n                  <span style={{display: 'inline-flex'}}>\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" style={{ display: 'inline-block', width: '10px', height: '10px'}}>\n                      <circle cx=\"5\" cy=\"5\" r=\"5\" fill=\"red\"></circle>\n                    </svg>\n                    <span style={{ position: \"relative\", top: \"-4px\"}}>&nbsp;Out Range</span>\n                  </span>\n                </div>\n              </div>\n\n\n            ))}\n          </div>\n\n\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default FeatureImportanceGraph;\n"]},"metadata":{},"sourceType":"module"}