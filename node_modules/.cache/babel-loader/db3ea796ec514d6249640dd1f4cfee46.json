{"ast":null,"code":"import React from 'react';\nimport * as d3 from \"d3\";\nconst width = 954;\n\nconst tree = data => {\n  const root = d3.hierarchy(data);\n  root.dx = 10;\n  root.dy = width / (root.height + 1);\n  return d3.tree().nodeSize([root.dx, root.dy])(root);\n};\n\nclass TreeChart extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      node: null\n    };\n  }\n\n  componentWillMount() {}\n\n  componentDidMount() {\n    this.initChart();\n  }\n\n  componentDidUpdate() {}\n\n  componentWillUnmount() {}\n\n  initChart() {\n    const root = tree(this.props.data);\n    let x0 = Infinity;\n    let x1 = -x0;\n    root.each(d => {\n      if (d.x > x1) x1 = d.x;\n      if (d.x < x0) x0 = d.x;\n    });\n    const svg = d3.create(\"svg\").attr(\"viewBox\", [0, 0, width, x1 - x0 + root.dx * 2]);\n    const g = svg.append(\"g\").attr(\"font-family\", \"sans-serif\").attr(\"font-size\", 10).attr(\"transform\", `translate(${root.dy / 3},${root.dx - x0})`);\n    const link = g.append(\"g\").attr(\"fill\", \"none\").attr(\"stroke\", \"#555\").attr(\"stroke-opacity\", 0.4).attr(\"stroke-width\", 1.5).selectAll(\"path\").data(root.links()).join(\"path\").attr(\"d\", d3.linkHorizontal().x(d => d.y).y(d => d.x));\n    const node = g.append(\"g\").attr(\"stroke-linejoin\", \"round\").attr(\"stroke-width\", 3).selectAll(\"g\").data(root.descendants()).join(\"g\").attr(\"transform\", d => `translate(${d.y},${d.x})`);\n    node.append(\"circle\").attr(\"fill\", d => d.children ? \"#555\" : \"#999\").attr(\"r\", 2.5);\n    node.append(\"text\").attr(\"dy\", \"0.31em\").attr(\"x\", d => d.children ? -6 : 6).attr(\"text-anchor\", d => d.children ? \"end\" : \"start\").text(d => d.data.name).clone(true).lower().attr(\"stroke\", \"white\");\n    this.setState({\n      node: svg.node()\n    }); // this.node = svg.node();\n  }\n\n  render() {\n    return this.state.node ? this.state.node : null;\n  }\n\n}\n\nexport default TreeChart; // function TreeChart(props)  {\n//     let svgRef;\n//\n//     console.log('initChart() :', initChart());\n//     return (\n//         <>\n//         <svg ref={n => node = n} width={500} height={500}>\n//\n//         </svg>\n//         </>\n//     )\n// }","map":{"version":3,"sources":["E:/Hammad/FrontEnd/ClientApp/src/components/TreeChart/TreeChart.js"],"names":["React","d3","width","tree","data","root","hierarchy","dx","dy","height","nodeSize","TreeChart","Component","constructor","props","state","node","componentWillMount","componentDidMount","initChart","componentDidUpdate","componentWillUnmount","x0","Infinity","x1","each","d","x","svg","create","attr","g","append","link","selectAll","links","join","linkHorizontal","y","descendants","children","text","name","clone","lower","setState","render"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,KAAKC,EAAZ,MAAoB,IAApB;AAGA,MAAMC,KAAK,GAAG,GAAd;;AAEA,MAAMC,IAAI,GAAGC,IAAI,IAAI;AACjB,QAAMC,IAAI,GAAGJ,EAAE,CAACK,SAAH,CAAaF,IAAb,CAAb;AACAC,EAAAA,IAAI,CAACE,EAAL,GAAU,EAAV;AACAF,EAAAA,IAAI,CAACG,EAAL,GAAUN,KAAK,IAAIG,IAAI,CAACI,MAAL,GAAc,CAAlB,CAAf;AACA,SAAOR,EAAE,CAACE,IAAH,GAAUO,QAAV,CAAmB,CAACL,IAAI,CAACE,EAAN,EAAUF,IAAI,CAACG,EAAf,CAAnB,EAAuCH,IAAvC,CAAP;AACH,CALD;;AAOA,MAAMM,SAAN,SAAwBX,KAAK,CAACY,SAA9B,CAAwC;AAEpCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACTC,MAAAA,IAAI,EAAE;AADG,KAAb;AAGH;;AAEDC,EAAAA,kBAAkB,GAAG,CACpB;;AAEDC,EAAAA,iBAAiB,GAAG;AAChB,SAAKC,SAAL;AACH;;AAEDC,EAAAA,kBAAkB,GAAG,CACpB;;AAEDC,EAAAA,oBAAoB,GAAG,CACtB;;AAEDF,EAAAA,SAAS,GAAG;AACR,UAAMd,IAAI,GAAGF,IAAI,CAAC,KAAKW,KAAL,CAAWV,IAAZ,CAAjB;AACA,QAAIkB,EAAE,GAAGC,QAAT;AACA,QAAIC,EAAE,GAAG,CAACF,EAAV;AACAjB,IAAAA,IAAI,CAACoB,IAAL,CAAUC,CAAC,IAAI;AACX,UAAIA,CAAC,CAACC,CAAF,GAAMH,EAAV,EAAcA,EAAE,GAAGE,CAAC,CAACC,CAAP;AACd,UAAID,CAAC,CAACC,CAAF,GAAML,EAAV,EAAcA,EAAE,GAAGI,CAAC,CAACC,CAAP;AACjB,KAHD;AAKA,UAAMC,GAAG,GAAG3B,EAAE,CAAC4B,MAAH,CAAU,KAAV,EACPC,IADO,CACF,SADE,EACS,CAAC,CAAD,EAAI,CAAJ,EAAO5B,KAAP,EAAcsB,EAAE,GAAGF,EAAL,GAAUjB,IAAI,CAACE,EAAL,GAAU,CAAlC,CADT,CAAZ;AAGA,UAAMwB,CAAC,GAAGH,GAAG,CAACI,MAAJ,CAAW,GAAX,EACLF,IADK,CACA,aADA,EACe,YADf,EAELA,IAFK,CAEA,WAFA,EAEa,EAFb,EAGLA,IAHK,CAGA,WAHA,EAGc,aAAYzB,IAAI,CAACG,EAAL,GAAU,CAAE,IAAGH,IAAI,CAACE,EAAL,GAAUe,EAAG,GAHtD,CAAV;AAKA,UAAMW,IAAI,GAAGF,CAAC,CAACC,MAAF,CAAS,GAAT,EACRF,IADQ,CACH,MADG,EACK,MADL,EAERA,IAFQ,CAEH,QAFG,EAEO,MAFP,EAGRA,IAHQ,CAGH,gBAHG,EAGe,GAHf,EAIRA,IAJQ,CAIH,cAJG,EAIa,GAJb,EAKRI,SALQ,CAKE,MALF,EAMR9B,IANQ,CAMHC,IAAI,CAAC8B,KAAL,EANG,EAORC,IAPQ,CAOH,MAPG,EAQRN,IARQ,CAQH,GARG,EAQE7B,EAAE,CAACoC,cAAH,GACNV,CADM,CACJD,CAAC,IAAIA,CAAC,CAACY,CADH,EAENA,CAFM,CAEJZ,CAAC,IAAIA,CAAC,CAACC,CAFH,CARF,CAAb;AAYA,UAAMX,IAAI,GAAGe,CAAC,CAACC,MAAF,CAAS,GAAT,EACRF,IADQ,CACH,iBADG,EACgB,OADhB,EAERA,IAFQ,CAEH,cAFG,EAEa,CAFb,EAGRI,SAHQ,CAGE,GAHF,EAIR9B,IAJQ,CAIHC,IAAI,CAACkC,WAAL,EAJG,EAKRH,IALQ,CAKH,GALG,EAMRN,IANQ,CAMH,WANG,EAMUJ,CAAC,IAAK,aAAYA,CAAC,CAACY,CAAE,IAAGZ,CAAC,CAACC,CAAE,GANvC,CAAb;AAQAX,IAAAA,IAAI,CAACgB,MAAL,CAAY,QAAZ,EACKF,IADL,CACU,MADV,EACkBJ,CAAC,IAAIA,CAAC,CAACc,QAAF,GAAa,MAAb,GAAsB,MAD7C,EAEKV,IAFL,CAEU,GAFV,EAEe,GAFf;AAIAd,IAAAA,IAAI,CAACgB,MAAL,CAAY,MAAZ,EACKF,IADL,CACU,IADV,EACgB,QADhB,EAEKA,IAFL,CAEU,GAFV,EAEeJ,CAAC,IAAIA,CAAC,CAACc,QAAF,GAAa,CAAC,CAAd,GAAkB,CAFtC,EAGKV,IAHL,CAGU,aAHV,EAGyBJ,CAAC,IAAIA,CAAC,CAACc,QAAF,GAAa,KAAb,GAAqB,OAHnD,EAIKC,IAJL,CAIUf,CAAC,IAAIA,CAAC,CAACtB,IAAF,CAAOsC,IAJtB,EAKKC,KALL,CAKW,IALX,EAKiBC,KALjB,GAMKd,IANL,CAMU,QANV,EAMoB,OANpB;AAQA,SAAKe,QAAL,CAAc;AAAC7B,MAAAA,IAAI,EAAEY,GAAG,CAACZ,IAAJ;AAAP,KAAd,EAjDQ,CAkDR;AACH;;AAED8B,EAAAA,MAAM,GAAG;AACL,WAAS,KAAK/B,KAAL,CAAWC,IAAX,GAAkB,KAAKD,KAAL,CAAWC,IAA7B,GAAoC,IAA7C;AACH;;AA7EmC;;AAgFxC,eAAgBL,SAAhB,C,CAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React from 'react';\nimport * as d3 from \"d3\";\n\n\nconst width = 954;\n\nconst tree = data => {\n    const root = d3.hierarchy(data);\n    root.dx = 10;\n    root.dy = width / (root.height + 1);\n    return d3.tree().nodeSize([root.dx, root.dy])(root);\n}\n\nclass TreeChart extends React.Component {\n    node;\n    constructor(props) {\n        super(props);\n        this.state = {\n            node: null,\n        }\n    }\n\n    componentWillMount() {\n    }\n\n    componentDidMount() {\n        this.initChart();\n    }\n\n    componentDidUpdate() {\n    }\n\n    componentWillUnmount() {\n    }\n\n    initChart() {\n        const root = tree(this.props.data);\n        let x0 = Infinity;\n        let x1 = -x0;\n        root.each(d => {\n            if (d.x > x1) x1 = d.x;\n            if (d.x < x0) x0 = d.x;\n        });\n\n        const svg = d3.create(\"svg\")\n            .attr(\"viewBox\", [0, 0, width, x1 - x0 + root.dx * 2]);\n\n        const g = svg.append(\"g\")\n            .attr(\"font-family\", \"sans-serif\")\n            .attr(\"font-size\", 10)\n            .attr(\"transform\", `translate(${root.dy / 3},${root.dx - x0})`);\n\n        const link = g.append(\"g\")\n            .attr(\"fill\", \"none\")\n            .attr(\"stroke\", \"#555\")\n            .attr(\"stroke-opacity\", 0.4)\n            .attr(\"stroke-width\", 1.5)\n            .selectAll(\"path\")\n            .data(root.links())\n            .join(\"path\")\n            .attr(\"d\", d3.linkHorizontal()\n                .x(d => d.y)\n                .y(d => d.x));\n\n        const node = g.append(\"g\")\n            .attr(\"stroke-linejoin\", \"round\")\n            .attr(\"stroke-width\", 3)\n            .selectAll(\"g\")\n            .data(root.descendants())\n            .join(\"g\")\n            .attr(\"transform\", d => `translate(${d.y},${d.x})`);\n\n        node.append(\"circle\")\n            .attr(\"fill\", d => d.children ? \"#555\" : \"#999\")\n            .attr(\"r\", 2.5);\n\n        node.append(\"text\")\n            .attr(\"dy\", \"0.31em\")\n            .attr(\"x\", d => d.children ? -6 : 6)\n            .attr(\"text-anchor\", d => d.children ? \"end\" : \"start\")\n            .text(d => d.data.name)\n            .clone(true).lower()\n            .attr(\"stroke\", \"white\");\n\n        this.setState({node: svg.node()})\n        // this.node = svg.node();\n    }\n\n    render() {\n        return ( this.state.node ? this.state.node : null );\n    }\n}\n\nexport  default TreeChart;\n\n// function TreeChart(props)  {\n//     let svgRef;\n\n//\n//     console.log('initChart() :', initChart());\n//     return (\n//         <>\n//         <svg ref={n => node = n} width={500} height={500}>\n//\n//         </svg>\n//         </>\n//     )\n// }\n\n"]},"metadata":{},"sourceType":"module"}