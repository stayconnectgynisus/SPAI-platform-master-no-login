{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nexports.__esModule = true;\nexports.default = reactToString;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nfunction reactToString(element) {\n  var nodes = [];\n\n  var recursion = function recursion(elmt) {\n    React.Children.forEach(elmt.props.children, function (child) {\n      if (React.isValidElement(child)) {\n        recursion(child);\n      } else if (typeof child === 'string') {\n        nodes.push(child);\n      }\n    });\n  };\n\n  recursion(element);\n  return nodes;\n}\n\nmodule.exports = exports.default;","map":{"version":3,"sources":["E:/Hammad/FrontEnd/ClientApp/node_modules/rsuite/lib/utils/reactToString.js"],"names":["_interopRequireWildcard","require","exports","__esModule","default","reactToString","React","element","nodes","recursion","elmt","Children","forEach","props","children","child","isValidElement","push","module"],"mappings":"AAAA;;AAEA,IAAIA,uBAAuB,GAAGC,OAAO,CAAC,+CAAD,CAArC;;AAEAC,OAAO,CAACC,UAAR,GAAqB,IAArB;AACAD,OAAO,CAACE,OAAR,GAAkBC,aAAlB;;AAEA,IAAIC,KAAK,GAAGN,uBAAuB,CAACC,OAAO,CAAC,OAAD,CAAR,CAAnC;;AAEA,SAASI,aAAT,CAAuBE,OAAvB,EAAgC;AAC9B,MAAIC,KAAK,GAAG,EAAZ;;AAEA,MAAIC,SAAS,GAAG,SAASA,SAAT,CAAmBC,IAAnB,EAAyB;AACvCJ,IAAAA,KAAK,CAACK,QAAN,CAAeC,OAAf,CAAuBF,IAAI,CAACG,KAAL,CAAWC,QAAlC,EAA4C,UAAUC,KAAV,EAAiB;AAC3D,UAAIT,KAAK,CAACU,cAAN,CAAqBD,KAArB,CAAJ,EAAiC;AAC/BN,QAAAA,SAAS,CAACM,KAAD,CAAT;AACD,OAFD,MAEO,IAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;AACpCP,QAAAA,KAAK,CAACS,IAAN,CAAWF,KAAX;AACD;AACF,KAND;AAOD,GARD;;AAUAN,EAAAA,SAAS,CAACF,OAAD,CAAT;AACA,SAAOC,KAAP;AACD;;AAEDU,MAAM,CAAChB,OAAP,GAAiBA,OAAO,CAACE,OAAzB","sourcesContent":["\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nexports.__esModule = true;\nexports.default = reactToString;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nfunction reactToString(element) {\n  var nodes = [];\n\n  var recursion = function recursion(elmt) {\n    React.Children.forEach(elmt.props.children, function (child) {\n      if (React.isValidElement(child)) {\n        recursion(child);\n      } else if (typeof child === 'string') {\n        nodes.push(child);\n      }\n    });\n  };\n\n  recursion(element);\n  return nodes;\n}\n\nmodule.exports = exports.default;"]},"metadata":{},"sourceType":"script"}