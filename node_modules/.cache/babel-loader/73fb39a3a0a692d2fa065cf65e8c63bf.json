{"ast":null,"code":"var _jsxFileName = \"E:\\\\Hammad\\\\FrontEnd\\\\ClientApp\\\\src\\\\components\\\\ProbabilityGraphOverTime\\\\ProbabilityGraphOverTime.js\";\nimport React from \"react\";\nimport { MultiSelect } from \"primereact/multiselect\";\nimport \"./probability.style.scss\";\nimport { extendMoment } from \"moment-range\";\nimport { Calendar } from \"primereact/calendar\";\nimport Moment from \"moment\";\nimport * as Highcharts from 'highcharts';\nimport AnnotationsFactory from \"highcharts/modules/annotations\";\nimport HighchartsReact from 'highcharts-react-official'; // Load module after Highcharts is loaded\n\nrequire('highcharts/modules/exporting')(Highcharts);\n\nAnnotationsFactory(Highcharts);\nconst moment = extendMoment(Moment);\nconst options = {\n  legend: {\n    position: \"top\",\n    align: \"end\",\n    padding: 40,\n    boxWidth: 10,\n    labels: {\n      boxWidth: 10,\n      usePointStyle: true,\n      padding: 20\n    }\n  }\n};\nvar conTypeColors = [\"#7cb5ec\", \"#434348\", \"#90ed7d\", \"#f7a35c\", \"#8085e9\", \"#ca472f\", \"#0b84a5\", \"#6f4e7c\", \"#4773ab\", \"#2b5080\", \"#41274b\", \"#8ba3cc\", \"#a3b5d4\", \"#b9c6dd\", \"#cdd5e7\", \"#dfecf4\", \"#ffffff\"];\n\nfunction getOptions(mapData) {\n  return {\n    exporting: {\n      enabled: true\n    },\n    chart: {\n      type: 'line',\n      backgroundColor: 'transparent',\n      height: 430\n    },\n    title: {\n      text: null,\n      style: {\n        color: \"#333333\",\n        fontSize: \"13.5px\"\n      }\n    },\n    tooltip: {\n      formatter: function () {\n        console.log(this); //return 'Extra data: <b>' + this.point.myData + '</b>';\n\n        var f = \"<br/>\";\n\n        if (this.point.data) {\n          f = ' - <span style=\"color:' + (this.point.PredictionValue == 1 ? 'red' : 'green') + ';font-weight:bold;\">' + (this.point.PredictionValue == 1 ? 'Positive' : 'Negative') + '</span></b><br />';\n        }\n\n        return '<span style=\"font-size:10px;\">' + this.x + '</span><br/><span style=\"color:' + this.series.color + '\">\\u25CF</span> ' + this.series.name + ': <b>' + (this.point.y < 0 ? this.point.y * -1 : this.point.y) + '%' + f;\n      } //pointFormat: '<span style=\"color:{series.color}\">\\u25CF</span> {series.name}: <b>{point.y}</b><br/>'\n\n    },\n    plotOptions: {\n      line: {\n        dataLabels: {\n          enabled: false\n        },\n        enableMouseTracking: true\n      }\n    },\n    credits: {\n      enabled: false\n    },\n    xAxis: {\n      categories: mapData.labels\n    },\n    yAxis: {\n      title: {\n        text: null\n      }\n    },\n    series: mapData.datasets,\n    annotations: [{\n      labels: mapData && mapData.annotations && mapData.annotations.length > 0 ? mapData.annotations : [],\n      // labels: [{\n      //   point: {\n      //     x: 1,\n      //     y: 85.2,\n      //     xAxis: 0,\n      //     yAxis: 0\n      //   },\n      //   text: 'Veklury 100 mg, Aspirin dose is 1 or 2 tablets, take every 4 hours'\n      // }],\n      labelOptions: {\n        x: -100,\n        y: -15 //backgroundColor: 'rgba(255,255,255,0.5)',\n\n      }\n    }]\n  };\n}\n\nclass ProbabilityGraphOverTime extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: [],\n      mappedData: {},\n      showChart: true,\n      chartData: {},\n      filterData: null,\n      times: [],\n      fromFilter: null,\n      toFilter: null,\n      availableOptions: ['Short-Term', 'Mid-Term', 'Long-Term'],\n      selectedOptions: ['Short-Term', 'Mid-Term', 'Long-Term']\n    };\n  }\n\n  componentDidUpdate(prevProps) {\n    // if data change\n    if (prevProps.data !== this.props.data) {\n      this.setState({\n        data: this.props.data,\n        filterData: []\n      });\n      const mapped = this.mappingData(this.props.data);\n      this.setState({\n        mappedData: mapped\n      });\n      const chartData = getOptions(mapped);\n      this.setState({\n        chartData: chartData\n      });\n    }\n  }\n\n  splitAndJoin(med, d) {\n    if (!med) return \"\";\n    med = \"<b>Medications (\" + moment(d.PredictionDate).format(\"MM/DD HH:mm\").toString() + \")</b><br/>\" + med;\n    return med.replace(/,/g, '<br/>');\n  }\n\n  getFinalSeriesData(data) {\n    var finalSeries = [];\n    const myString = data.map(x => {\n      return x.ConditionType;\n    });\n    const uniqueString = [...new Set(myString)]; //[\"a\", \"b\", \"c\", \"d\"]\n\n    uniqueString.map((c, i) => {\n      finalSeries.push({\n        name: c,\n        showInLegend: true,\n        color: conTypeColors[i],\n        data: data.filter(x => x.ConditionType == c).map(d => {\n          return {\n            y: d.PredictionValueST == 0 ? d.ProbabilityST * -1 : d.ProbabilityST,\n            data: d,\n            PredictionValue: d.PredictionValueST\n          };\n        })\n      });\n    }); // #Commented On 14 Aug - Severity of Illness over time (per Condition-Patient) Changes\n    // if (this.state.selectedOptions.length == 0 || this.state.selectedOptions.find(x => x == \"Short-Term\")) {\n    //   finalSeries.push({\n    //     name: 'Short Term',\n    //     showInLegend: true,\n    //     color: '#ca472f',\n    //     data: data.map((d) => {\n    //       return { y: d.ProbabilityST, data: d, PredictionValue: d.PredictionValueST };\n    //     })\n    //   });\n    // }\n    // if (this.state.selectedOptions.find(x => x == \"Mid-Term\")) {\n    //   finalSeries.push({\n    //     name: 'Mid Term',\n    //     showInLegend: true,\n    //     color: '#0b84a5',\n    //     data: data.map((d) => {\n    //       return { y: d.ProbabilityMT, data: d, PredictionValue: d.PredictionValueMT };\n    //     })\n    //   });\n    // }\n    // if (this.state.selectedOptions.find(x => x == \"Long-Term\")) {\n    //   finalSeries.push({\n    //     name: 'Long Term',\n    //     showInLegend: true,\n    //     color: '#6f4e7c',\n    //     data: data.map((d) => {\n    //       return { y: d.ProbabilityLT, data: d, PredictionValue: d.PredictionValueLT };\n    //     })\n    //   });\n    // }\n\n    return finalSeries;\n  }\n\n  mappingData(data) {\n    // sort the data according to PredictionDate\n    data.sort((a, b) => new Date(a.PredictionDate) - new Date(b.PredictionDate));\n    var finalSeries = this.getFinalSeriesData(data);\n    console.log('Mapped Data', data); // mapped object base on the data\n\n    const mapped = {\n      labels: data.map(d => moment(d.PredictionDate).format(\"MM/DD HH:mm\").toString()),\n      annotations: data.map((d, i) => {\n        if (!d.Medication || d.Medication == \"\") return {};\n        return {\n          point: {\n            x: i,\n            y: d.ProbabilityST,\n            xAxis: 0,\n            yAxis: 0\n          },\n          text: this.splitAndJoin(d.Medication, d)\n        };\n      }),\n      datasets: finalSeries\n    };\n    return mapped;\n  }\n\n  updateSelectedOptions(e) {\n    this.setState({\n      selectedOptions: e\n    });\n    setTimeout(() => {\n      const mapped = this.mappingData(this.state.filterData && this.state.filterData.length > 0 ? this.state.filterData : this.state.data);\n      this.setState({\n        mappedData: mapped\n      });\n      const chartData = getOptions(this.state.mappedData);\n      this.setState({\n        chartData: chartData\n      });\n    }, 200);\n  }\n\n  onFilterChange(e, filter) {\n    // set filter base on the filter name [filter] = dynamic name\n    this.setState({\n      [filter]: e.value\n    });\n    setTimeout(() => {\n      // get filters and data\n      const {\n        data,\n        fromFilter,\n        toFilter\n      } = this.state; // if data and filters exist\n\n      if (data.length && fromFilter && toFilter) {\n        // get all the data in the filters dates range (fromData toDate)\n        const fromDate = new Date(fromFilter),\n              toDate = new Date(toFilter),\n              filterRange = moment().range(fromDate, toDate);\n        const filterDates = data.filter(d => filterRange.contains(moment(d.PredictionDate))).sort((a, b) => new Date(a.PredictionDate) - new Date(b.PredictionDate));\n        const mapped = this.mappingData(filterDates);\n        this.setState({\n          mappedData: mapped,\n          filterData: filterDates\n        });\n        const chartData = getOptions(this.state.mappedData);\n        this.setState({\n          chartData: chartData\n        });\n      }\n    });\n  }\n\n  pickerTemplate(option) {\n    const onFilterChange = e => {\n      this.setState({\n        [option.filter]: e.value\n      });\n    };\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"p-clearfix\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 281,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Calendar, {\n      value: this.state[option.filter],\n      onChange: onFilterChange,\n      timeOnly: true,\n      hourFormat: \"12\",\n      placeholder: option.label,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 282,\n        columnNumber: 9\n      }\n    }));\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"severity-illness exposure-over-time-container gyn-table-container\",\n      style: {\n        height: 'auto'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 296,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"header\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 298,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 299,\n        columnNumber: 11\n      }\n    }, \"Severity of Illness over time (per Condition-Patient)\")), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"content\",\n      style: {\n        display: 'block'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 319,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        width: '100%',\n        clear: 'both',\n        float: 'right',\n        display: 'inline-block',\n        textAlign: 'right'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 320,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Calendar, {\n      value: this.state.fromFilter,\n      showTime: true,\n      hideOnDateTimeSelect: true,\n      style: {\n        marginRight: '10px'\n      },\n      onChange: e => this.onFilterChange(e, \"fromFilter\"),\n      placeholder: \"Date Range - From\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 321,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(Calendar, {\n      value: this.state.toFilter,\n      showTime: true,\n      minDate: new Date(this.state.fromFilter),\n      hideOnDateTimeSelect: true,\n      onChange: e => this.onFilterChange(e, \"toFilter\"),\n      placeholder: \"Date Range - To\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 329,\n        columnNumber: 13\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        clear: 'both'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 346,\n        columnNumber: 11\n      }\n    }), this.state.showChart && this.state.data && /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        width: '100%',\n        clear: 'both'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 348,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(HighchartsReact, {\n      highcharts: Highcharts,\n      options: this.state.chartData,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 349,\n        columnNumber: 15\n      }\n    }))));\n  }\n\n}\n\nProbabilityGraphOverTime.navigationOptions = {\n  title: null\n};\nexport default ProbabilityGraphOverTime;","map":{"version":3,"sources":["E:/Hammad/FrontEnd/ClientApp/src/components/ProbabilityGraphOverTime/ProbabilityGraphOverTime.js"],"names":["React","MultiSelect","extendMoment","Calendar","Moment","Highcharts","AnnotationsFactory","HighchartsReact","require","moment","options","legend","position","align","padding","boxWidth","labels","usePointStyle","conTypeColors","getOptions","mapData","exporting","enabled","chart","type","backgroundColor","height","title","text","style","color","fontSize","tooltip","formatter","console","log","f","point","data","PredictionValue","x","series","name","y","plotOptions","line","dataLabels","enableMouseTracking","credits","xAxis","categories","yAxis","datasets","annotations","length","labelOptions","ProbabilityGraphOverTime","Component","constructor","props","state","mappedData","showChart","chartData","filterData","times","fromFilter","toFilter","availableOptions","selectedOptions","componentDidUpdate","prevProps","setState","mapped","mappingData","splitAndJoin","med","d","PredictionDate","format","toString","replace","getFinalSeriesData","finalSeries","myString","map","ConditionType","uniqueString","Set","c","i","push","showInLegend","filter","PredictionValueST","ProbabilityST","sort","a","b","Date","Medication","updateSelectedOptions","e","setTimeout","onFilterChange","value","fromDate","toDate","filterRange","range","filterDates","contains","pickerTemplate","option","label","render","display","width","clear","float","textAlign","marginRight","navigationOptions"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { MultiSelect } from \"primereact/multiselect\";\nimport \"./probability.style.scss\";\nimport { extendMoment } from \"moment-range\";\nimport { Calendar } from \"primereact/calendar\";\nimport Moment from \"moment\";\nimport * as Highcharts from 'highcharts';\nimport AnnotationsFactory from \"highcharts/modules/annotations\";\nimport HighchartsReact from 'highcharts-react-official';\n// Load module after Highcharts is loaded\nrequire('highcharts/modules/exporting')(Highcharts);\nAnnotationsFactory(Highcharts);\n\nconst moment = extendMoment(Moment);\n\nconst options = {\n  legend: {\n    position: \"top\",\n    align: \"end\",\n    padding: 40,\n    boxWidth: 10,\n    labels: {\n      boxWidth: 10,\n      usePointStyle: true,\n      padding: 20,\n    },\n  },\n};\n\nvar conTypeColors = [\n  \"#7cb5ec\",\n  \"#434348\",\n  \"#90ed7d\",\n  \"#f7a35c\",\n  \"#8085e9\",\n  \"#ca472f\",\n  \"#0b84a5\",\n  \"#6f4e7c\",\n  \"#4773ab\",\n  \"#2b5080\",\n  \"#41274b\",\n  \"#8ba3cc\",\n  \"#a3b5d4\",\n  \"#b9c6dd\",\n  \"#cdd5e7\",\n  \"#dfecf4\",\n  \"#ffffff\",\n];\n\nfunction getOptions(mapData) {\n  return {\n    exporting: {\n      enabled: true\n    },\n    chart: {\n      type: 'line',\n      backgroundColor: 'transparent',\n      height: 430,\n    },\n    title: {\n      text: null,\n      style: { color: \"#333333\", fontSize: \"13.5px\" }\n    },\n    tooltip: {\n      formatter: function () {\n        console.log(this);\n        //return 'Extra data: <b>' + this.point.myData + '</b>';\n        var f = \"<br/>\";\n        if (this.point.data) {\n          f = ' - <span style=\"color:' + (this.point.PredictionValue == 1 ? 'red' : 'green') + ';font-weight:bold;\">' + (this.point.PredictionValue == 1 ? 'Positive' : 'Negative') + '</span></b><br />';\n        }\n        return '<span style=\"font-size:10px;\">' + this.x + '</span><br/><span style=\"color:' + this.series.color + '\">\\u25CF</span> ' + this.series.name + ': <b>' + (this.point.y < 0 ? this.point.y * -1 : this.point.y) + '%' + f;\n      },\n      //pointFormat: '<span style=\"color:{series.color}\">\\u25CF</span> {series.name}: <b>{point.y}</b><br/>'\n    },\n    plotOptions: {\n      line: {\n        dataLabels: {\n          enabled: false\n        },\n        enableMouseTracking: true\n      }\n    },\n    credits: {\n      enabled: false,\n    },\n    xAxis: {\n      categories: mapData.labels\n    },\n    yAxis: {\n      title: {\n        text: null\n      }\n    },\n    series: mapData.datasets,\n\n    annotations: [{\n      labels: mapData && mapData.annotations && mapData.annotations.length > 0 ? mapData.annotations : [],\n      // labels: [{\n      //   point: {\n      //     x: 1,\n      //     y: 85.2,\n      //     xAxis: 0,\n      //     yAxis: 0\n      //   },\n      //   text: 'Veklury 100 mg, Aspirin dose is 1 or 2 tablets, take every 4 hours'\n      // }],\n      labelOptions: {\n        x: -100, y: -15,\n        //backgroundColor: 'rgba(255,255,255,0.5)',\n      }\n    }],\n  }\n}\n\n\nclass ProbabilityGraphOverTime extends React.Component {\n  static navigationOptions = { title: null };\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: [],\n      mappedData: {},\n      showChart: true,\n      chartData: {},\n      filterData: null,\n      times: [],\n      fromFilter: null,\n      toFilter: null,\n      availableOptions: ['Short-Term', 'Mid-Term', 'Long-Term'],\n      selectedOptions: ['Short-Term', 'Mid-Term', 'Long-Term']\n    };\n  }\n\n  componentDidUpdate(prevProps) {\n    // if data change\n\n    if (prevProps.data !== this.props.data) {\n      this.setState({ data: this.props.data, filterData: [] });\n      const mapped = this.mappingData(this.props.data);\n      this.setState({ mappedData: mapped });\n\n      const chartData = getOptions(mapped);\n      this.setState({ chartData: chartData });\n    }\n  }\n  splitAndJoin(med, d) {\n    if (!med) return \"\";\n\n    med = \"<b>Medications (\" + moment(d.PredictionDate).format(\"MM/DD HH:mm\").toString() + \")</b><br/>\" + med;\n    return med.replace(/,/g, '<br/>')\n  }\n  getFinalSeriesData(data) {\n    var finalSeries = [];\n\n    const myString = data.map(x => {\n      return x.ConditionType\n    });\n    const uniqueString = [...new Set(myString)]; //[\"a\", \"b\", \"c\", \"d\"]\n    uniqueString.map((c, i) => {\n      finalSeries.push({\n        name: c,\n        showInLegend: true,\n        color: conTypeColors[i],\n        data: data.filter(x => x.ConditionType == c).map((d) => {\n          return { y: d.PredictionValueST == 0 ? d.ProbabilityST * -1 : d.ProbabilityST, data: d, PredictionValue: d.PredictionValueST };\n        })\n      });\n    });\n    // #Commented On 14 Aug - Severity of Illness over time (per Condition-Patient) Changes\n    // if (this.state.selectedOptions.length == 0 || this.state.selectedOptions.find(x => x == \"Short-Term\")) {\n    //   finalSeries.push({\n    //     name: 'Short Term',\n    //     showInLegend: true,\n    //     color: '#ca472f',\n    //     data: data.map((d) => {\n    //       return { y: d.ProbabilityST, data: d, PredictionValue: d.PredictionValueST };\n    //     })\n    //   });\n    // }\n\n    // if (this.state.selectedOptions.find(x => x == \"Mid-Term\")) {\n    //   finalSeries.push({\n    //     name: 'Mid Term',\n    //     showInLegend: true,\n    //     color: '#0b84a5',\n    //     data: data.map((d) => {\n    //       return { y: d.ProbabilityMT, data: d, PredictionValue: d.PredictionValueMT };\n    //     })\n    //   });\n    // }\n\n    // if (this.state.selectedOptions.find(x => x == \"Long-Term\")) {\n    //   finalSeries.push({\n    //     name: 'Long Term',\n    //     showInLegend: true,\n    //     color: '#6f4e7c',\n    //     data: data.map((d) => {\n    //       return { y: d.ProbabilityLT, data: d, PredictionValue: d.PredictionValueLT };\n    //     })\n    //   });\n    // }\n    return finalSeries;\n  }\n\n  mappingData(data) {\n    // sort the data according to PredictionDate\n    data.sort((a, b) => new Date(a.PredictionDate) - new Date(b.PredictionDate));\n\n    var finalSeries = this.getFinalSeriesData(data);\n\n\n    console.log('Mapped Data', data)\n    // mapped object base on the data\n    const mapped = {\n      labels: data.map((d) =>\n        moment(d.PredictionDate).format(\"MM/DD HH:mm\").toString()\n      ),\n      annotations: data.map((d, i) => {\n        if (!d.Medication || d.Medication == \"\") return {};\n\n        return {\n          point: {\n            x: i,\n            y: d.ProbabilityST,\n            xAxis: 0,\n            yAxis: 0\n          },\n          text: this.splitAndJoin(d.Medication, d)\n        };\n      }),\n      datasets: finalSeries,\n    };\n    return mapped;\n  }\n  updateSelectedOptions(e) {\n    this.setState({ selectedOptions: e });\n\n    setTimeout(() => {\n      const mapped = this.mappingData(this.state.filterData && this.state.filterData.length > 0 ? this.state.filterData : this.state.data);\n      this.setState({ mappedData: mapped });\n\n      const chartData = getOptions(this.state.mappedData);\n      this.setState({ chartData: chartData });\n    }, 200)\n\n  }\n  onFilterChange(e, filter) {\n    // set filter base on the filter name [filter] = dynamic name\n    this.setState({ [filter]: e.value });\n    setTimeout(() => {\n      // get filters and data\n      const { data, fromFilter, toFilter } = this.state;\n      // if data and filters exist\n      if (data.length && fromFilter && toFilter) {\n        // get all the data in the filters dates range (fromData toDate)\n        const fromDate = new Date(fromFilter),\n          toDate = new Date(toFilter),\n          filterRange = moment().range(fromDate, toDate);\n        const filterDates = data\n          .filter((d) => filterRange.contains(moment(d.PredictionDate)))\n          .sort(\n            (a, b) => new Date(a.PredictionDate) - new Date(b.PredictionDate)\n          );\n\n        const mapped = this.mappingData(filterDates);\n        this.setState({ mappedData: mapped, filterData: filterDates });\n\n        const chartData = getOptions(this.state.mappedData);\n        this.setState({ chartData: chartData });\n      }\n    });\n  }\n\n  pickerTemplate(option) {\n    const onFilterChange = (e) => {\n      this.setState({ [option.filter]: e.value });\n    };\n    return (\n      <div className=\"p-clearfix\">\n        <Calendar\n          value={this.state[option.filter]}\n          onChange={onFilterChange}\n          timeOnly={true}\n          hourFormat=\"12\"\n          placeholder={option.label}\n        />\n      </div>\n    );\n  }\n\n  render() {\n\n    return (\n      <div className={\"severity-illness exposure-over-time-container gyn-table-container\"} style={{ height: 'auto' }}>\n        {/*DATES FILTERS*/}\n        <div className=\"header\">\n          <h3>Severity of Illness over time (per Condition-Patient)</h3>\n          {/* #Commented On 14 Aug - Severity of Illness over time (per Condition-Patient) Changes */}\n          {/* <div style={{ display: 'flex' }}>\n            <MultiSelect\n              value={this.state.selectedOptions}\n              options={this.state.availableOptions}\n              onChange={(e) =>\n                this.updateSelectedOptions(e.value)\n\n              }\n              style={{ minWidth: \"250px\", position: \"relative\", marginRight: '15px' }}\n              filter={true}\n              maxSelectedLabels={2}\n              filterPlaceholder=\"Search\"\n              placeholder=\"Choose\"\n            />\n          </div> */}\n        </div>\n\n\n        <div className=\"content\" style={{ display: 'block' }}>\n          <div style={{ width: '100%', clear: 'both', float: 'right', display: 'inline-block', textAlign: 'right' }}>\n            <Calendar\n              value={this.state.fromFilter}\n              showTime\n              hideOnDateTimeSelect\n              style={{ marginRight: '10px' }}\n              onChange={(e) => this.onFilterChange(e, \"fromFilter\")}\n              placeholder={\"Date Range - From\"}\n            />\n            <Calendar\n              value={this.state.toFilter}\n              showTime\n              minDate={new Date(this.state.fromFilter)}\n              hideOnDateTimeSelect\n              onChange={(e) => this.onFilterChange(e, \"toFilter\")}\n              placeholder={\"Date Range - To\"}\n            />\n          </div>\n          {/*CHART*/}\n          {/* <Chart\n          className={\"chart-line\"}\n          height={\"80\"}\n          type=\"line\"\n          data={filterData ? filterData : mappedData}\n          options={options}\n        /> */}\n          <div style={{ clear: 'both' }}></div>\n          {this.state.showChart && this.state.data &&\n            <div style={{ width: '100%', clear: 'both' }}>\n              <HighchartsReact\n                highcharts={Highcharts}\n                options={this.state.chartData}\n              />\n            </div>\n          }\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default ProbabilityGraphOverTime;\n"]},"metadata":{},"sourceType":"module"}