{"ast":null,"code":"var _jsxFileName = \"E:\\\\Hammad\\\\FrontEnd\\\\ClientApp\\\\src\\\\components\\\\ExposureGraphOverTime\\\\ExposureGraphOverTime.js\";\nimport React from \"react\";\nimport \"./exposure.style.scss\";\nimport { extendMoment } from \"moment-range\";\nimport { Chart } from \"primereact/chart\";\nimport { Calendar } from \"primereact/calendar\";\nimport Moment from \"moment\";\nimport * as Highcharts from 'highcharts';\nimport HighchartsReact from 'highcharts-react-official';\nconst moment = extendMoment(Moment);\nconst options = {\n  // title: {\n  //     display: true,\n  //     text: 'My Title',\n  //     textAlign: 'left',\n  //     fontSize: 16\n  // },\n  legend: {\n    position: \"top\",\n    align: \"end\",\n    padding: 40,\n    boxWidth: 10,\n    labels: {\n      boxWidth: 10,\n      usePointStyle: true,\n      padding: 20\n    }\n  }\n};\n\nfunction getOptions(mapData) {\n  return {\n    title: {\n      text: null,\n      style: {\n        color: \"#333333\",\n        fontSize: \"13.5px\"\n      }\n    },\n    chart: {\n      type: 'line'\n    },\n    // tooltip: {\n    //   pointFormat: ' <b>{point.y}</b>'\n    // },\n    plotOptions: {\n      line: {\n        dataLabels: {\n          enabled: true\n        },\n        enableMouseTracking: true\n      }\n    },\n    credits: {\n      enabled: false\n    },\n    xAxis: {\n      categories: mapData.labels\n    },\n    yAxis: {\n      title: {\n        text: null\n      }\n    },\n    series: [{\n      name: mapData && mapData.datasets && mapData.datasets.length > 0 ? mapData.datasets[0].label : '',\n      showInLegend: true,\n      color: '#ef5d22',\n      data: mapData && mapData.datasets && mapData.datasets.length > 0 ? mapData.datasets[0].data : []\n    }]\n  };\n}\n\nclass ExposureGraphOverTime extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: [],\n      mappedData: {},\n      filterData: null,\n      times: [],\n      currSelected: null,\n      fromFilter: null,\n      toFilter: null\n    };\n  }\n\n  componentDidUpdate(prevProps) {\n    // if selectedItem change\n    if (prevProps.selectedItem !== this.props.selectedItem) {\n      this.setState({\n        currSelected: this.props.selectedItem\n      });\n    } // if data change\n\n\n    if (prevProps.data !== this.props.data) {\n      this.setState({\n        data: this.props.data\n      });\n      const mapped = this.mappingData(this.props.data);\n      this.setState({\n        mappedData: mapped\n      });\n    }\n  }\n\n  mappingData(data) {\n    // sort the data according to ExposureDate\n    data.sort((a, b) => new Date(a.ExposureDate) - new Date(b.ExposureDate)); // mapped object base on the data\n\n    const mapped = {\n      labels: data.map(d => moment(d.ExposureDate).format(\"MM/DD HH:mm\").toString()),\n      datasets: [{\n        label: data[0].PatientMRN,\n        data: data.map(d => d.TotalInteractionCount),\n        fill: false,\n        backgroundColor: \"#ef5d22\",\n        borderColor: \"#ef5d22\"\n      }]\n    };\n    console.log('Mapped Overtime', mapped);\n    return mapped;\n  }\n\n  componentWillMount() {}\n\n  componentDidMount() {}\n\n  componentWillUnmount() {}\n\n  onFilterChange(e, filter) {\n    // set filter base on the filter name [filter] = dynamic name\n    this.setState({\n      [filter]: e.value\n    });\n    setTimeout(() => {\n      // get filters and data\n      const {\n        data,\n        fromFilter,\n        toFilter\n      } = this.state; // if data and filters exist\n\n      if (data.length && fromFilter && toFilter) {\n        // get all the data in the filters dates range (fromData toDate)\n        const fromDate = new Date(fromFilter),\n              toDate = new Date(toFilter),\n              filterRange = moment().range(fromDate, toDate);\n        const filterDates = data.filter(d => filterRange.contains(moment(d.ExposureDate))).sort((a, b) => new Date(a.ExposureDate) - new Date(b.ExposureDate)); // mapping the data\n\n        const filterData = {\n          labels: filterDates.map(d => moment(d.ExposureDate).format(\"MM/DD HH:mm\").toString()),\n          datasets: [{\n            label: data[0].PatientMRN,\n            data: filterDates.map(d => d.TotalInteractionCount),\n            fill: false,\n            backgroundColor: \"#ef5d22\",\n            borderColor: \"#ef5d22\"\n          }]\n        }; // set filtered data\n\n        this.setState({\n          filterData: filterData\n        });\n      }\n    });\n  }\n\n  pickerTemplate(option) {\n    const onFilterChange = e => {\n      this.setState({\n        [option.filter]: e.value\n      });\n    };\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"p-clearfix\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Calendar, {\n      value: this.state[option.filter],\n      onChange: onFilterChange,\n      timeOnly: true,\n      hourFormat: \"12\",\n      placeholder: option.label,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 9\n      }\n    }));\n  }\n\n  render() {\n    const {\n      filterData,\n      mappedData\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"exposure-over-time-container gyn-table-container\",\n      style: {\n        height: 'auto'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"header\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 11\n      }\n    }, \"Exposure Graph Over Time\"), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Calendar, {\n      value: this.state.fromFilter,\n      showTime: true,\n      hideOnDateTimeSelect: true,\n      style: {\n        marginRight: '15px'\n      },\n      onChange: e => this.onFilterChange(e, \"fromFilter\"),\n      placeholder: \"Date Range - From\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(Calendar, {\n      value: this.state.toFilter,\n      showTime: true,\n      minDate: new Date(this.state.fromFilter),\n      hideOnDateTimeSelect: true,\n      onChange: e => this.onFilterChange(e, \"toFilter\"),\n      placeholder: \"Date Range - To\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 13\n      }\n    }))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"content\",\n      style: {\n        display: 'block'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 9\n      }\n    }, filterData && filterData.length, /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        width: '100%',\n        clear: 'both'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(HighchartsReact, {\n      highcharts: Highcharts,\n      options: getOptions(filterData ? filterData : mappedData),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 13\n      }\n    }))));\n  }\n\n}\n\nExposureGraphOverTime.navigationOptions = {\n  title: null\n};\nexport default ExposureGraphOverTime;","map":{"version":3,"sources":["E:/Hammad/FrontEnd/ClientApp/src/components/ExposureGraphOverTime/ExposureGraphOverTime.js"],"names":["React","extendMoment","Chart","Calendar","Moment","Highcharts","HighchartsReact","moment","options","legend","position","align","padding","boxWidth","labels","usePointStyle","getOptions","mapData","title","text","style","color","fontSize","chart","type","plotOptions","line","dataLabels","enabled","enableMouseTracking","credits","xAxis","categories","yAxis","series","name","datasets","length","label","showInLegend","data","ExposureGraphOverTime","Component","constructor","props","state","mappedData","filterData","times","currSelected","fromFilter","toFilter","componentDidUpdate","prevProps","selectedItem","setState","mapped","mappingData","sort","a","b","Date","ExposureDate","map","d","format","toString","PatientMRN","TotalInteractionCount","fill","backgroundColor","borderColor","console","log","componentWillMount","componentDidMount","componentWillUnmount","onFilterChange","e","filter","value","setTimeout","fromDate","toDate","filterRange","range","filterDates","contains","pickerTemplate","option","render","height","marginRight","display","width","clear","navigationOptions"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport \"./exposure.style.scss\";\nimport { extendMoment } from \"moment-range\";\nimport { Chart } from \"primereact/chart\";\nimport { Calendar } from \"primereact/calendar\";\nimport Moment from \"moment\";\nimport * as Highcharts from 'highcharts';\nimport HighchartsReact from 'highcharts-react-official';\n\nconst moment = extendMoment(Moment);\n\nconst options = {\n  // title: {\n  //     display: true,\n  //     text: 'My Title',\n  //     textAlign: 'left',\n  //     fontSize: 16\n  // },\n  legend: {\n    position: \"top\",\n    align: \"end\",\n    padding: 40,\n    boxWidth: 10,\n    labels: {\n      boxWidth: 10,\n      usePointStyle: true,\n      padding: 20,\n    },\n  },\n};\n\nfunction getOptions(mapData) {\n  return {\n    title: {\n      text: null,\n      style: { color: \"#333333\", fontSize: \"13.5px\" }\n    },\n    chart: {\n      type: 'line',\n      \n    },\n    // tooltip: {\n    //   pointFormat: ' <b>{point.y}</b>'\n    // },\n    plotOptions: {\n      line: {\n            dataLabels: {\n                enabled: true\n            },\n            enableMouseTracking: true\n        }\n    },\n    credits: {\n      enabled: false,\n    },\n    xAxis: {\n      categories: mapData.labels\n    },\n    yAxis: {\n      title: {\n          text:null\n      }\n  },\n    series: [{\n      name: mapData && mapData.datasets && mapData.datasets.length > 0 ? mapData.datasets[0].label : '',\n      showInLegend: true,\n      color: '#ef5d22',\n      data: mapData && mapData.datasets && mapData.datasets.length > 0 ? mapData.datasets[0].data : [],\n    }]\n  }\n}\nclass ExposureGraphOverTime extends React.Component {\n  static navigationOptions = { title: null };\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: [],\n      mappedData: {},\n      filterData: null,\n      times: [],\n      currSelected: null,\n      fromFilter: null,\n      toFilter: null,\n    };\n  }\n\n  componentDidUpdate(prevProps) {\n    // if selectedItem change\n    if (prevProps.selectedItem !== this.props.selectedItem) {\n      this.setState({ currSelected: this.props.selectedItem });\n    }\n    // if data change\n    if (prevProps.data !== this.props.data) {\n      this.setState({ data: this.props.data });\n      const mapped = this.mappingData(this.props.data);\n      this.setState({ mappedData: mapped });\n    }\n  }\n\n  mappingData(data) {\n    // sort the data according to ExposureDate\n    data.sort((a, b) => new Date(a.ExposureDate) - new Date(b.ExposureDate));\n    // mapped object base on the data\n    const mapped = {\n      labels: data.map((d) =>\n        moment(d.ExposureDate).format(\"MM/DD HH:mm\").toString()\n      ),\n      datasets: [\n        {\n          label: data[0].PatientMRN,\n          data: data.map((d) => d.TotalInteractionCount),\n          fill: false,\n          backgroundColor: \"#ef5d22\",\n          borderColor: \"#ef5d22\",\n        },\n      ],\n    };\n    console.log('Mapped Overtime', mapped)\n    return mapped;\n  }\n\n  componentWillMount() { }\n\n  componentDidMount() { }\n\n  componentWillUnmount() { }\n\n  onFilterChange(e, filter) {\n    // set filter base on the filter name [filter] = dynamic name\n    this.setState({ [filter]: e.value });\n    setTimeout(() => {\n      // get filters and data\n      const { data, fromFilter, toFilter } = this.state;\n      // if data and filters exist\n      if (data.length && fromFilter && toFilter) {\n        // get all the data in the filters dates range (fromData toDate)\n        const fromDate = new Date(fromFilter),\n          toDate = new Date(toFilter),\n          filterRange = moment().range(fromDate, toDate);\n        const filterDates = data\n          .filter((d) => filterRange.contains(moment(d.ExposureDate)))\n          .sort((a, b) => new Date(a.ExposureDate) - new Date(b.ExposureDate));\n        // mapping the data\n        const filterData = {\n          labels: filterDates.map((d) =>\n            moment(d.ExposureDate).format(\"MM/DD HH:mm\").toString()\n          ),\n          datasets: [\n            {\n              label: data[0].PatientMRN,\n              data: filterDates.map((d) => d.TotalInteractionCount),\n              fill: false,\n              backgroundColor: \"#ef5d22\",\n              borderColor: \"#ef5d22\",\n            },\n          ],\n        };\n        // set filtered data\n        this.setState({ filterData: filterData });\n      }\n    });\n  }\n\n  pickerTemplate(option) {\n    const onFilterChange = (e) => {\n      this.setState({ [option.filter]: e.value });\n    };\n    return (\n      <div className=\"p-clearfix\">\n        <Calendar\n          value={this.state[option.filter]}\n          onChange={onFilterChange}\n          timeOnly={true}\n          hourFormat=\"12\"\n          placeholder={option.label}\n        />\n      </div>\n    );\n  }\n\n  render() {\n    const { filterData, mappedData } = this.state;\n\n    return (\n      <div className={\"exposure-over-time-container gyn-table-container\"} style={{height: 'auto'}}>\n        {/*DATES FILTERS*/}\n        <div className=\"header\">\n          <h3>Exposure Graph Over Time</h3>\n          <div>\n            <Calendar\n              value={this.state.fromFilter}\n              showTime\n              hideOnDateTimeSelect\n              style={{ marginRight: '15px' }}\n              onChange={(e) => this.onFilterChange(e, \"fromFilter\")}\n              placeholder={\"Date Range - From\"}\n            />\n            <Calendar\n              value={this.state.toFilter}\n              showTime\n              minDate={new Date(this.state.fromFilter)}\n              hideOnDateTimeSelect\n              onChange={(e) => this.onFilterChange(e, \"toFilter\")}\n              placeholder={\"Date Range - To\"}\n            />\n          </div>\n        </div>\n        <div className=\"content\" style={{display: 'block'}}>\n          {filterData && filterData.length}\n\n          {/*CHART*/}\n          {/* <Chart\n            className={\"chart-line\"}\n            height={\"80\"}\n            type=\"line\"\n            data={filterData ? filterData : mappedData}\n            options={options}\n          /> */}\n\n          <div style={{ width: '100%', clear: 'both' }}>\n            <HighchartsReact\n              highcharts={Highcharts}\n              options={getOptions(filterData ? filterData : mappedData)}\n            />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default ExposureGraphOverTime;\n"]},"metadata":{},"sourceType":"module"}