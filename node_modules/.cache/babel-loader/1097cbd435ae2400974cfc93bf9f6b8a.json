{"ast":null,"code":"var _jsxFileName = \"E:\\\\Hammad\\\\FrontEnd\\\\ClientApp\\\\src\\\\components\\\\ExposureMap\\\\ExposureMap.js\";\nimport React from 'react';\nimport './exposure-map.scss';\nimport { OrganizationChart } from 'primereact/organizationchart';\nimport { Dropdown } from \"primereact/dropdown\";\nimport jsonData from '../../assets/data/mocked-exposure';\nimport Tree from 'react-tree-graph';\nimport 'react-tree-graph/dist/style.css';\nimport env from '../../evn';\nimport TreeChart from \"../TreeChart/TreeChart\";\nimport APIHelper from '../../utils/apiHelper';\nconst isProd = env.isProd;\nconst BASE_URL = '/exposure/path';\nlet data = {\n  name: 'Parent',\n  children: [{\n    name: 'Child One'\n  }, {\n    name: 'Child Two'\n  }]\n};\n\nclass ExposureMap extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      currSelected: null,\n      data: {}\n    };\n  }\n\n  componentDidMount() {\n    this.initData();\n  }\n\n  mappingData(data) {\n    const matrix = [];\n    data.sort((a, b) => a.hLevel - b.hLevel).map(item => {\n      if (!matrix[item.hLevel]) matrix[item.hLevel] = [];\n      matrix[item.hLevel].push(item);\n    });\n\n    const findParent = (root, mrn) => {\n      let parent = null;\n      console.log('findParent root:', root);\n\n      if (root.itemData.MRN === mrn) {\n        parent = root;\n        return parent;\n      }\n\n      const scanChild = child => {\n        console.log('scanChild child:', child);\n\n        if (child.itemData.MRN === mrn) {\n          parent = child;\n          return;\n        } else {\n          if (!child.children) return;\n          child.children && child.children.forEach(c => {\n            if (parent) return;\n            scanChild(c);\n          });\n        }\n      };\n\n      root.children.forEach(child => {\n        if (parent) return;\n        scanChild(child);\n      });\n      if (parent) return parent;else return null;\n    }; // const findParent = (prevRow, mrn) => {\n    //     // root.itemData.MRN === mrn\n    //     return prevRow.find( item => item.itemData.mrn === mrn ) || null;\n    // }\n\n\n    let exposureMapData = {};\n    matrix.forEach((row, i) => {\n      // root element\n      if (i === 0) {\n        const firstItem = row[0];\n        exposureMapData = {\n          name: `${firstItem.MRN}`,\n          itemData: firstItem,\n          isRoot: true,\n          expanded: true,\n          gProps: {\n            className: `level-${firstItem.RiskLevel}`\n          },\n          children: []\n        };\n        return;\n      } // child\n\n\n      row.forEach(item => {\n        const rootElement = exposureMapData;\n        const parentIndex = i - 1;\n        const splittedPath = item.path.split('/').filter(p => p);\n        const parentMRN = splittedPath[parentIndex];\n        const parentEl = findParent(rootElement, parentMRN);\n        if (!parentEl) return;\n        if (!parentEl.children) parentEl.children = []; // level-${node.itemData.RiskLevel}`\n\n        parentEl.children.push({\n          name: `${item.MRN}`,\n          itemData: item,\n          expanded: false,\n          gProps: {\n            className: `level-${item.RiskLevel}`\n          },\n          children: []\n        });\n      });\n    });\n    this.setState({\n      data: exposureMapData\n    });\n  }\n\n  initData() {\n    console.log('ExposureMap InitData call');\n\n    if (isProd) {\n      const url = `${BASE_URL}`;\n      APIHelper(url).then(data => {\n        console.log('ExposureMap InitData :', data);\n        this.mappingData(data);\n      }).catch(err => {\n        console.log('ExposureMap InitData err: ', err); // Do something for an error here\n      });\n    } else {\n      const data = jsonData || [];\n      this.mappingData(data);\n    }\n  }\n\n  updateMap(item) {\n    console.log('updateMap try to get data');\n    const url = `${BASE_URL}?patientMRN=${item.PatientMRN}&ProviderMRN=${item.ProviderMRN}`;\n    console.log('updateMap url :', url);\n    APIHelper(url).then(data => {\n      console.log('updateMap:', data);\n      this.mappingData(data);\n    }).catch(err => {\n      console.log('updateMap err :', err);\n    });\n  }\n\n  componentWillMount() {}\n\n  componentWillUnmount() {}\n\n  componentDidUpdate(prevProps) {\n    // if selectedItem change\n    if (prevProps.selectedItem !== this.props.selectedItem) {\n      const item = this.props.selectedItem;\n      console.log('expose map :', item);\n      this.setState({\n        currSelected: item\n      });\n\n      if (isProd) {\n        this.updateMap(item);\n      }\n    }\n  }\n\n  nodeTemplate(node) {\n    const props = this.props;\n\n    const selfImage = require('../../assets/level-1.png');\n\n    const doctorImage = require('../../assets/level-2.png');\n\n    const personImage = require('../../assets/person.png');\n\n    const img = node.itemData.type === 'P' ? doctorImage : personImage;\n\n    if (node.isRoot) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: `node-container root-node level-${node.itemData.RiskLevel}`,\n        onClick: () => props.onSelectedChanged(node.itemData.MRN),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"img\", {\n        src: selfImage,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 25\n        }\n      }), /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 25\n        }\n      }, node.itemData.MRN)));\n    } else {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: `node-container sub-node level-${node.itemData.RiskLevel}`,\n        onClick: () => props.onSelectedChanged(node.itemData.MRN),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: 'person-content',\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"img\", {\n        src: img,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 25\n        }\n      }), /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 25\n        }\n      }, node.itemData.MRN)));\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: 'exposure-map-container',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"header\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 21\n      }\n    }, \"Epidimilogical Exposure Map\"), /*#__PURE__*/React.createElement(Dropdown, {\n      value: this.state.infectionTypeFilter,\n      options: [],\n      onChange: () => {},\n      placeholder: \"Department\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 22\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: 'row',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(ColorTextItem, {\n      level: 1,\n      text: 'High Risk',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(ColorTextItem, {\n      level: 2,\n      text: 'High Risk',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(ColorTextItem, {\n      level: 3,\n      text: 'Moderate risk',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(ColorTextItem, {\n      level: 4,\n      text: 'Low Risk',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(ColorTextItem, {\n      level: 5,\n      text: 'Low Risk',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 21\n      }\n    })), /*#__PURE__*/React.createElement(Tree, {\n      data: this.state.data,\n      animated: true // svgProps={{\n      //     transform: 'rotate(90)'\n      // }}\n      ,\n      textProps: {\n        transform: 'rotate(0) scale(0.7) translate(-50, 20)'\n      },\n      height: 600,\n      width: 600,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 25\n      }\n    }));\n  }\n\n}\n\nExposureMap.navigationOptions = {\n  title: null\n};\nexport default ExposureMap;\n\nconst ColorTextItem = props => {\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: 'color-item',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 236,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: `circle level-${props.level}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 237,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"span\", {\n    className: `text level-${props.level}-text`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 238,\n      columnNumber: 13\n    }\n  }, \" \", props.text, \" \"));\n};","map":{"version":3,"sources":["E:/Hammad/FrontEnd/ClientApp/src/components/ExposureMap/ExposureMap.js"],"names":["React","OrganizationChart","Dropdown","jsonData","Tree","env","TreeChart","APIHelper","isProd","BASE_URL","data","name","children","ExposureMap","Component","constructor","props","state","currSelected","componentDidMount","initData","mappingData","matrix","sort","a","b","hLevel","map","item","push","findParent","root","mrn","parent","console","log","itemData","MRN","scanChild","child","forEach","c","exposureMapData","row","i","firstItem","isRoot","expanded","gProps","className","RiskLevel","rootElement","parentIndex","splittedPath","path","split","filter","p","parentMRN","parentEl","setState","url","then","catch","err","updateMap","PatientMRN","ProviderMRN","componentWillMount","componentWillUnmount","componentDidUpdate","prevProps","selectedItem","nodeTemplate","node","selfImage","require","doctorImage","personImage","img","type","onSelectedChanged","render","infectionTypeFilter","transform","navigationOptions","title","ColorTextItem","level","text"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './exposure-map.scss';\nimport {OrganizationChart} from 'primereact/organizationchart';\nimport {Dropdown} from \"primereact/dropdown\";\nimport jsonData from '../../assets/data/mocked-exposure';\nimport Tree from 'react-tree-graph';\nimport 'react-tree-graph/dist/style.css'\nimport env from '../../evn';\nimport TreeChart from \"../TreeChart/TreeChart\";\nimport APIHelper from '../../utils/apiHelper';\nconst isProd = env.isProd;\nconst BASE_URL = '/exposure/path';\n\n\nlet data = {\n    name: 'Parent',\n    children: [{\n        name: 'Child One'\n    }, {\n        name: 'Child Two'\n    }]\n};\nclass ExposureMap extends React.Component {\n    static navigationOptions = {title: null,};\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            currSelected: null,\n            data: {}\n        };\n    }\n\n    componentDidMount() {\n        this.initData()\n    }\n\n    mappingData(data) {\n        const matrix = [];\n        data.sort( (a, b) => a.hLevel - b.hLevel ).map( item => {\n            if (!matrix[item.hLevel] ) matrix[item.hLevel] = [];\n            matrix[item.hLevel].push(item);\n        });\n\n        const findParent = (root, mrn) => {\n            let parent = null;\n\n            console.log('findParent root:' , root)\n            if (root.itemData.MRN === mrn) {\n                parent = root;\n                return parent;\n            }\n\n            const scanChild = (child) => {\n                console.log('scanChild child:' , child)\n                if (child.itemData.MRN === mrn) {\n                    parent = child;\n                    return;\n                } else {\n                    if (!child.children) return;\n                    child.children && child.children.forEach(c => {\n                        if (parent) return;\n                        scanChild(c);\n                    })\n                }\n            }\n\n            root.children.forEach(child => {\n                if (parent) return;\n                scanChild(child);\n            });\n\n            if (parent) return parent;\n            else        return null\n        }\n\n        // const findParent = (prevRow, mrn) => {\n        //     // root.itemData.MRN === mrn\n        //     return prevRow.find( item => item.itemData.mrn === mrn ) || null;\n        // }\n        let exposureMapData = {};\n\n        matrix.forEach( (row, i) => {\n            // root element\n            if (i === 0) {\n                const firstItem = row[0];\n                exposureMapData = {\n                    name: `${firstItem.MRN}`,\n                    itemData: firstItem,\n                    isRoot: true,\n                    expanded: true,\n                    gProps: {\n                        className: `level-${firstItem.RiskLevel}`\n                    },\n                    children: []\n                };\n                return;\n            }\n\n            // child\n            row.forEach( item => {\n                const rootElement = exposureMapData;\n                const parentIndex = i -1;\n                const splittedPath = item.path.split('/').filter( p => p );\n                const parentMRN = splittedPath[parentIndex];\n                const parentEl = findParent(rootElement, parentMRN);\n                if (!parentEl) return;\n                if (!parentEl.children) parentEl.children = [];\n                // level-${node.itemData.RiskLevel}`\n                parentEl.children.push({\n                    name: `${item.MRN}`,\n                    itemData: item,\n                    expanded: false,\n                    gProps: {\n                        className: `level-${item.RiskLevel}`\n                    },\n                    children: []\n                })\n            })\n        });\n        this.setState({data: exposureMapData});\n    }\n\n    initData() {\n        console.log('ExposureMap InitData call');\n        if (isProd) {\n            const url = `${BASE_URL}`;\n            APIHelper(url).then(data => {\n                console.log('ExposureMap InitData :', data);\n                this.mappingData(data);\n            }).catch(err => {\n                console.log('ExposureMap InitData err: ', err );\n                // Do something for an error here\n            });\n        } else {\n            const data = jsonData || [];\n            this.mappingData(data);\n        }\n    }\n\n    updateMap(item) {\n        console.log('updateMap try to get data');\n        const url = `${BASE_URL}?patientMRN=${item.PatientMRN}&ProviderMRN=${item.ProviderMRN}`;\n        console.log('updateMap url :' , url);\n        APIHelper(url).then(data => {\n            console.log('updateMap:', data);\n            this.mappingData(data);\n        }).catch(err => {\n                console.log('updateMap err :' , err);\n        });\n    }\n\n    componentWillMount() {}\n    componentWillUnmount() {}\n\n    componentDidUpdate(prevProps) {\n        // if selectedItem change\n        if (prevProps.selectedItem !== this.props.selectedItem) {\n            const item = this.props.selectedItem;\n            console.log('expose map :' , item);\n            this.setState({currSelected: item});\n            if (isProd) {\n                this.updateMap(item);\n            }\n        }\n    }\n\n    nodeTemplate(node) {\n        const props = this.props;\n        const selfImage = require('../../assets/level-1.png');\n        const doctorImage = require('../../assets/level-2.png');\n        const personImage = require('../../assets/person.png');\n        const img = node.itemData.type === 'P' ? doctorImage : personImage;\n        if (node.isRoot) {\n            return (\n                <div className={`node-container root-node level-${node.itemData.RiskLevel}`} onClick={ () => props.onSelectedChanged(node.itemData.MRN)}>\n                    <div>\n                        <img src={selfImage}/>\n                        <p>{node.itemData.MRN}</p>\n                    </div>\n                </div>\n            );\n        }\n\n        else {\n            return (\n                <div className={`node-container sub-node level-${node.itemData.RiskLevel}`} onClick={() => props.onSelectedChanged(node.itemData.MRN)}>\n                    <div className={'person-content'}>\n                        <img src={img}/>\n                        <p>{node.itemData.MRN}</p>\n                    </div>\n                </div>\n            );\n        }\n    }\n\n    render() {\n        return (\n            <div className={'exposure-map-container'}>\n                <div className=\"header\">\n                    <p>Epidimilogical Exposure Map</p>\n                     <Dropdown value={this.state.infectionTypeFilter} options={[]} onChange={() => {}} placeholder=\"Department\" />\n                </div>\n                <div className={'row'}>\n                    <ColorTextItem level={1} text={'High Risk'} />\n                    <ColorTextItem level={2} text={'High Risk'} />\n                    <ColorTextItem level={3} text={'Moderate risk'} />\n                    <ColorTextItem level={4} text={'Low Risk'} />\n                    <ColorTextItem level={5} text={'Low Risk'} />\n                </div>\n                        <Tree\n                            data={this.state.data}\n                            animated\n                            // svgProps={{\n                            //     transform: 'rotate(90)'\n                            // }}\n                            textProps={{\n                                transform: 'rotate(0) scale(0.7) translate(-50, 20)'\n                            }}\n                            height={600}\n                            width={600}>\n                        </Tree>\n\n                {/*{ Object.keys(this.state.data).length && <TreeChart data={this.state.data}/> }*/}\n                {/*{ this.state.data.length ? <OrganizationChart value={this.state.data} nodeTemplate={this.nodeTemplate.bind(this)}></OrganizationChart> : null }*/}\n            </div>);\n    }\n}\n\nexport default ExposureMap;\n\n\nconst ColorTextItem = (props) => {\n\n    return(\n        <div className={'color-item'}>\n            <div className={`circle level-${props.level}`}></div>\n            <span className={`text level-${props.level}-text`}> {props.text} </span>\n        </div>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}