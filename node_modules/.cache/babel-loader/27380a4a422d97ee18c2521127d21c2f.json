{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nexports.__esModule = true;\nexports.shouldShowNodeByExpanded = shouldShowNodeByExpanded;\nexports.flattenTree = flattenTree;\nexports.getNodeParents = getNodeParents;\nexports.getVirtualLisHeight = getVirtualLisHeight;\nexports.hasVisibleChildren = hasVisibleChildren;\nexports.treeDeprecatedWarning = treeDeprecatedWarning;\nexports.compareArray = compareArray;\nexports.getExpandAll = getExpandAll;\nexports.getExpandItemValues = getExpandItemValues;\nexports.getExpandState = getExpandState;\nexports.getDragNodeKeys = getDragNodeKeys;\nexports.calDropNodePosition = calDropNodePosition;\nexports.removeDragNode = removeDragNode;\nexports.createUpdateTreeDataFunction = createUpdateTreeDataFunction;\nexports.findNodeOfTree = findNodeOfTree;\nexports.filterNodesOfTree = filterNodesOfTree;\nexports.getExpandWhenSearching = getExpandWhenSearching;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _isEmpty2 = _interopRequireDefault(require(\"lodash/isEmpty\"));\n\nvar _clone2 = _interopRequireDefault(require(\"lodash/clone\"));\n\nvar _isNil2 = _interopRequireDefault(require(\"lodash/isNil\"));\n\nvar _isUndefined2 = _interopRequireDefault(require(\"lodash/isUndefined\"));\n\nvar _isArray2 = _interopRequireDefault(require(\"lodash/isArray\"));\n\nvar _intersection2 = _interopRequireDefault(require(\"lodash/intersection\"));\n\nvar _shallowEqual = _interopRequireDefault(require(\"../utils/shallowEqual\"));\n\nvar _shallowEqualArray = _interopRequireDefault(require(\"../utils/shallowEqualArray\"));\n\nvar _constants = require(\"../constants\");\n\nvar SEARCH_BAR_HEIGHT = 48;\nvar MENU_PADDING = 12; // Tree Node 之间的 间隔\n\nvar TREE_NODE_GAP = 4;\n/**\n * 判断当前节点是否应该显示\n * @param {*} expandItemValues\n * @param {*} parentKeys\n */\n\nfunction shouldShowNodeByExpanded(expandItemValues, parentKeys) {\n  if (expandItemValues === void 0) {\n    expandItemValues = [];\n  }\n\n  if (parentKeys === void 0) {\n    parentKeys = [];\n  }\n\n  var intersectionKeys = (0, _intersection2.default)(expandItemValues, parentKeys);\n\n  if (intersectionKeys.length === parentKeys.length) {\n    return true;\n  }\n\n  return false;\n}\n/**\n * 拍平树结构为数组\n * @param {*} tree\n * @param {*} childrenKey\n * @param {*} executor\n */\n\n\nfunction flattenTree(tree, childrenKey, executor) {\n  if (childrenKey === void 0) {\n    childrenKey = 'children';\n  }\n\n  var flattenData = [];\n\n  var traverse = function traverse(data, parent) {\n    if (!(0, _isArray2.default)(data)) {\n      return;\n    }\n\n    data.forEach(function (item, index) {\n      var node = typeof executor === 'function' ? executor(item, index) : item;\n      node.parent = parent;\n      flattenData.push((0, _extends2.default)({}, node));\n\n      if (item[childrenKey]) {\n        traverse(item[childrenKey], item);\n      }\n    });\n  };\n\n  traverse(tree, null);\n  return flattenData;\n}\n/**\n * 获取树节点所有的祖先节点\n * @param {*} node\n */\n\n\nfunction getNodeParents(node, parentKey, valueKey) {\n  if (parentKey === void 0) {\n    parentKey = 'parent';\n  }\n\n  var parents = [];\n\n  var traverse = function traverse(node) {\n    if (node === null || node === void 0 ? void 0 : node[parentKey]) {\n      traverse(node[parentKey]);\n\n      if (valueKey) {\n        parents.push(node[parentKey][valueKey]);\n      } else {\n        parents.push(node[parentKey]);\n      }\n    }\n  };\n\n  traverse(node);\n  return parents;\n}\n/**\n * 获取 VirtualList 的高度\n * @param {*} inline\n * @param {*} height\n */\n\n\nfunction getVirtualLisHeight(inline, searchable, height) {\n  if (height === void 0) {\n    height = 0;\n  }\n\n  var searchBarHeight = searchable ? SEARCH_BAR_HEIGHT : 0;\n  return inline ? height - MENU_PADDING * 2 : height - searchBarHeight - MENU_PADDING * 2;\n}\n/**\n * 判断节点是否存在可见的子节点。\n * @param node\n */\n\n\nfunction hasVisibleChildren(node, childrenKey) {\n  if (!Array.isArray(node[childrenKey])) {\n    return false;\n  }\n\n  return node[childrenKey].some(function (child) {\n    return child.visible;\n  });\n}\n/**\n * 废弃 prop warning\n * @param prop\n */\n\n\nfunction treeDeprecatedWarning(props, keys) {\n  if (keys === void 0) {\n    keys = [];\n  }\n\n  keys.forEach(function (key) {\n    if (!(0, _isUndefined2.default)(props[key])) {\n      console.warn(\"'Warning: \" + key + \" is deprecated and will be removed in a future release.'\");\n    }\n  });\n}\n/**\n * 浅比较两个数组是否不一样\n * @param a\n * @param b\n */\n\n\nfunction compareArray(a, b) {\n  return (0, _isArray2.default)(a) && (0, _isArray2.default)(b) && !(0, _shallowEqualArray.default)(a, b);\n}\n/**\n * 获取 expandAll 的 value\n * @param props\n */\n\n\nfunction getExpandAll(props) {\n  var expandAll = props.expandAll,\n      defaultExpandAll = props.defaultExpandAll;\n  return !(0, _isUndefined2.default)(expandAll) ? expandAll : defaultExpandAll;\n}\n/**\n * 获取 expandItemValues 的 value\n * @param props\n */\n\n\nfunction getExpandItemValues(props) {\n  var expandItemValues = props.expandItemValues,\n      defaultExpandItemValues = props.defaultExpandItemValues;\n\n  if (!(0, _isUndefined2.default)(expandItemValues) && Array.isArray(expandItemValues)) {\n    return expandItemValues;\n  }\n\n  if (!(0, _isUndefined2.default)(defaultExpandItemValues) && Array.isArray(defaultExpandItemValues)) {\n    return defaultExpandItemValues;\n  }\n\n  return [];\n}\n/**\n * 获取节点展开状态\n * @param node\n * @param props\n */\n\n\nfunction getExpandState(node, props) {\n  var _node$childrenKey;\n\n  var valueKey = props.valueKey,\n      childrenKey = props.childrenKey,\n      expandItemValues = props.expandItemValues;\n  var expandAll = getExpandAll(props);\n  var expand = getExpandItemValues(props).some(function (value) {\n    return (0, _shallowEqual.default)(node[valueKey], value);\n  });\n\n  if (!(0, _isUndefined2.default)(expandItemValues)) {\n    return expand;\n  } else if ((_node$childrenKey = node[childrenKey]) === null || _node$childrenKey === void 0 ? void 0 : _node$childrenKey.length) {\n    if (!(0, _isNil2.default)(node.expand)) {\n      return !!node.expand;\n    } else if (expandAll) {\n      return true;\n    }\n\n    return false;\n  }\n\n  return false;\n}\n/**\n * 获取拖拽节点及子节点的key\n * @param node\n * @param childrenKey\n * @param valueKey\n */\n\n\nfunction getDragNodeKeys(dragNode, childrenKey, valueKey) {\n  var dragNodeKeys = [dragNode[valueKey]];\n\n  var traverse = function traverse(data) {\n    if ((data === null || data === void 0 ? void 0 : data.length) > 0) {\n      data.forEach(function (node) {\n        dragNodeKeys = dragNodeKeys.concat([node[valueKey]]);\n\n        if (node[childrenKey]) {\n          traverse(node[childrenKey]);\n        }\n      });\n    }\n  };\n\n  traverse(dragNode[childrenKey]);\n  return dragNodeKeys;\n}\n\nfunction calDropNodePosition(event, treeNodeElement) {\n  var clientY = event.clientY;\n\n  var _treeNodeElement$getB = treeNodeElement.getBoundingClientRect(),\n      top = _treeNodeElement$getB.top,\n      bottom = _treeNodeElement$getB.bottom;\n\n  var gap = TREE_NODE_GAP; // 处于节点下方\n\n  if (clientY >= bottom - gap && clientY <= bottom) {\n    return _constants.TREE_NODE_DROP_POSITION.DRAG_OVER_BOTTOM;\n  } // 处于节点上方\n\n\n  if (clientY <= top + gap && clientY >= top) {\n    return _constants.TREE_NODE_DROP_POSITION.DRAG_OVER_TOP;\n  }\n\n  if (clientY >= top + gap && clientY <= bottom - gap) {\n    return _constants.TREE_NODE_DROP_POSITION.DRAG_OVER;\n  }\n\n  return -1;\n}\n\nfunction removeDragNode(data, params, _ref) {\n  var valueKey = _ref.valueKey,\n      childrenKey = _ref.childrenKey;\n  var dragNode = params.dragNode;\n\n  var traverse = function traverse(items, parent) {\n    for (var _index = 0; _index < items.length; _index += 1) {\n      var item = items[_index];\n\n      if ((0, _shallowEqual.default)(item[valueKey], dragNode[valueKey])) {\n        items.splice(_index, 1); // 当 children 为空，需要删除 children 属性，不显示角标\n\n        if (items.length === 0 && parent) {\n          delete parent.children;\n        }\n\n        break;\n      }\n\n      if (Array.isArray(item[childrenKey])) {\n        traverse(item[childrenKey], item);\n      }\n    }\n  };\n\n  traverse(data);\n}\n/**\n * 移动节点valueKey，先删除 dragNode 原本所在的数据，再将 dragNode 移动到拖动的位置\n * @param data\n * @param params\n */\n\n\nfunction createUpdateTreeDataFunction(params, _ref2) {\n  var valueKey = _ref2.valueKey,\n      childrenKey = _ref2.childrenKey;\n  return function (tree) {\n    var data = [].concat(tree);\n    var dragNode = params.dragNode,\n        dropNode = params.dropNode,\n        dropNodePosition = params.dropNodePosition;\n    removeDragNode(data, params, {\n      valueKey: valueKey,\n      childrenKey: childrenKey\n    });\n\n    var updateTree = function updateTree(items) {\n      for (var _index2 = 0; _index2 < items.length; _index2 += 1) {\n        var item = items[_index2];\n\n        if ((0, _shallowEqual.default)(item[valueKey], dropNode[valueKey])) {\n          // 拖拽到 dropNode内，作为 dropNode 的子节点\n          if (dropNodePosition === _constants.TREE_NODE_DROP_POSITION.DRAG_OVER) {\n            item[childrenKey] = (0, _isNil2.default)(item[childrenKey]) ? [] : item[childrenKey];\n            item[childrenKey].push(dragNode);\n            break;\n          } else if (dropNodePosition === _constants.TREE_NODE_DROP_POSITION.DRAG_OVER_TOP) {\n            // 拖拽到 dropNode 的上面\n            items.splice(_index2, 0, dragNode);\n            break;\n          } else if (dropNodePosition === _constants.TREE_NODE_DROP_POSITION.DRAG_OVER_BOTTOM) {\n            // 拖拽到 dropNode 的下面\n            items.splice(_index2 + 1, 0, dragNode);\n            break;\n          }\n        }\n\n        if (Array.isArray(item[childrenKey]) && item[childrenKey].length > 0) {\n          updateTree(item[childrenKey]);\n        }\n      }\n    };\n\n    updateTree(data);\n    return [].concat(data);\n  };\n}\n\nfunction findNodeOfTree(data, check) {\n  var findNode = function findNode(nodes) {\n    if (nodes === void 0) {\n      nodes = [];\n    }\n\n    for (var i = 0; i < nodes.length; i += 1) {\n      var item = nodes[i];\n\n      if ((0, _isArray2.default)(item.children)) {\n        var _node = findNode(item.children);\n\n        if (_node) {\n          return _node;\n        }\n      }\n\n      if (check(item)) {\n        return item;\n      }\n    }\n\n    return undefined;\n  };\n\n  return findNode(data);\n}\n\nfunction filterNodesOfTree(data, check) {\n  var findNodes = function findNodes(nodes) {\n    if (nodes === void 0) {\n      nodes = [];\n    }\n\n    var nextNodes = [];\n\n    for (var i = 0; i < nodes.length; i += 1) {\n      if ((0, _isArray2.default)(nodes[i].children)) {\n        var nextChildren = findNodes(nodes[i].children);\n\n        if (nextChildren.length) {\n          var item = (0, _clone2.default)(nodes[i]);\n          item.children = nextChildren;\n          nextNodes.push(item);\n          continue;\n        }\n      }\n\n      if (check(nodes[i])) {\n        nextNodes.push(nodes[i]);\n      }\n    }\n\n    return nextNodes;\n  };\n\n  return findNodes(data);\n}\n/**\n * 根据是否处于搜索状态来返回 expand 的值。如果处于搜索状态下，则展开所有的节点\n * @param searchKeyword\n * @param expand\n */\n\n\nfunction getExpandWhenSearching(searchKeyword, expand) {\n  return !(0, _isEmpty2.default)(searchKeyword) ? true : expand;\n}","map":{"version":3,"sources":["E:/Hammad/FrontEnd/ClientApp/node_modules/rsuite/lib/utils/treeUtils.js"],"names":["_interopRequireDefault","require","exports","__esModule","shouldShowNodeByExpanded","flattenTree","getNodeParents","getVirtualLisHeight","hasVisibleChildren","treeDeprecatedWarning","compareArray","getExpandAll","getExpandItemValues","getExpandState","getDragNodeKeys","calDropNodePosition","removeDragNode","createUpdateTreeDataFunction","findNodeOfTree","filterNodesOfTree","getExpandWhenSearching","_extends2","_isEmpty2","_clone2","_isNil2","_isUndefined2","_isArray2","_intersection2","_shallowEqual","_shallowEqualArray","_constants","SEARCH_BAR_HEIGHT","MENU_PADDING","TREE_NODE_GAP","expandItemValues","parentKeys","intersectionKeys","default","length","tree","childrenKey","executor","flattenData","traverse","data","parent","forEach","item","index","node","push","parentKey","valueKey","parents","inline","searchable","height","searchBarHeight","Array","isArray","some","child","visible","props","keys","key","console","warn","a","b","expandAll","defaultExpandAll","defaultExpandItemValues","_node$childrenKey","expand","value","dragNode","dragNodeKeys","concat","event","treeNodeElement","clientY","_treeNodeElement$getB","getBoundingClientRect","top","bottom","gap","TREE_NODE_DROP_POSITION","DRAG_OVER_BOTTOM","DRAG_OVER_TOP","DRAG_OVER","params","_ref","items","_index","splice","children","_ref2","dropNode","dropNodePosition","updateTree","_index2","check","findNode","nodes","i","_node","undefined","findNodes","nextNodes","nextChildren","searchKeyword"],"mappings":"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","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nexports.__esModule = true;\nexports.shouldShowNodeByExpanded = shouldShowNodeByExpanded;\nexports.flattenTree = flattenTree;\nexports.getNodeParents = getNodeParents;\nexports.getVirtualLisHeight = getVirtualLisHeight;\nexports.hasVisibleChildren = hasVisibleChildren;\nexports.treeDeprecatedWarning = treeDeprecatedWarning;\nexports.compareArray = compareArray;\nexports.getExpandAll = getExpandAll;\nexports.getExpandItemValues = getExpandItemValues;\nexports.getExpandState = getExpandState;\nexports.getDragNodeKeys = getDragNodeKeys;\nexports.calDropNodePosition = calDropNodePosition;\nexports.removeDragNode = removeDragNode;\nexports.createUpdateTreeDataFunction = createUpdateTreeDataFunction;\nexports.findNodeOfTree = findNodeOfTree;\nexports.filterNodesOfTree = filterNodesOfTree;\nexports.getExpandWhenSearching = getExpandWhenSearching;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _isEmpty2 = _interopRequireDefault(require(\"lodash/isEmpty\"));\n\nvar _clone2 = _interopRequireDefault(require(\"lodash/clone\"));\n\nvar _isNil2 = _interopRequireDefault(require(\"lodash/isNil\"));\n\nvar _isUndefined2 = _interopRequireDefault(require(\"lodash/isUndefined\"));\n\nvar _isArray2 = _interopRequireDefault(require(\"lodash/isArray\"));\n\nvar _intersection2 = _interopRequireDefault(require(\"lodash/intersection\"));\n\nvar _shallowEqual = _interopRequireDefault(require(\"../utils/shallowEqual\"));\n\nvar _shallowEqualArray = _interopRequireDefault(require(\"../utils/shallowEqualArray\"));\n\nvar _constants = require(\"../constants\");\n\nvar SEARCH_BAR_HEIGHT = 48;\nvar MENU_PADDING = 12; // Tree Node 之间的 间隔\n\nvar TREE_NODE_GAP = 4;\n/**\n * 判断当前节点是否应该显示\n * @param {*} expandItemValues\n * @param {*} parentKeys\n */\n\nfunction shouldShowNodeByExpanded(expandItemValues, parentKeys) {\n  if (expandItemValues === void 0) {\n    expandItemValues = [];\n  }\n\n  if (parentKeys === void 0) {\n    parentKeys = [];\n  }\n\n  var intersectionKeys = (0, _intersection2.default)(expandItemValues, parentKeys);\n\n  if (intersectionKeys.length === parentKeys.length) {\n    return true;\n  }\n\n  return false;\n}\n/**\n * 拍平树结构为数组\n * @param {*} tree\n * @param {*} childrenKey\n * @param {*} executor\n */\n\n\nfunction flattenTree(tree, childrenKey, executor) {\n  if (childrenKey === void 0) {\n    childrenKey = 'children';\n  }\n\n  var flattenData = [];\n\n  var traverse = function traverse(data, parent) {\n    if (!(0, _isArray2.default)(data)) {\n      return;\n    }\n\n    data.forEach(function (item, index) {\n      var node = typeof executor === 'function' ? executor(item, index) : item;\n      node.parent = parent;\n      flattenData.push((0, _extends2.default)({}, node));\n\n      if (item[childrenKey]) {\n        traverse(item[childrenKey], item);\n      }\n    });\n  };\n\n  traverse(tree, null);\n  return flattenData;\n}\n/**\n * 获取树节点所有的祖先节点\n * @param {*} node\n */\n\n\nfunction getNodeParents(node, parentKey, valueKey) {\n  if (parentKey === void 0) {\n    parentKey = 'parent';\n  }\n\n  var parents = [];\n\n  var traverse = function traverse(node) {\n    if (node === null || node === void 0 ? void 0 : node[parentKey]) {\n      traverse(node[parentKey]);\n\n      if (valueKey) {\n        parents.push(node[parentKey][valueKey]);\n      } else {\n        parents.push(node[parentKey]);\n      }\n    }\n  };\n\n  traverse(node);\n  return parents;\n}\n/**\n * 获取 VirtualList 的高度\n * @param {*} inline\n * @param {*} height\n */\n\n\nfunction getVirtualLisHeight(inline, searchable, height) {\n  if (height === void 0) {\n    height = 0;\n  }\n\n  var searchBarHeight = searchable ? SEARCH_BAR_HEIGHT : 0;\n  return inline ? height - MENU_PADDING * 2 : height - searchBarHeight - MENU_PADDING * 2;\n}\n/**\n * 判断节点是否存在可见的子节点。\n * @param node\n */\n\n\nfunction hasVisibleChildren(node, childrenKey) {\n  if (!Array.isArray(node[childrenKey])) {\n    return false;\n  }\n\n  return node[childrenKey].some(function (child) {\n    return child.visible;\n  });\n}\n/**\n * 废弃 prop warning\n * @param prop\n */\n\n\nfunction treeDeprecatedWarning(props, keys) {\n  if (keys === void 0) {\n    keys = [];\n  }\n\n  keys.forEach(function (key) {\n    if (!(0, _isUndefined2.default)(props[key])) {\n      console.warn(\"'Warning: \" + key + \" is deprecated and will be removed in a future release.'\");\n    }\n  });\n}\n/**\n * 浅比较两个数组是否不一样\n * @param a\n * @param b\n */\n\n\nfunction compareArray(a, b) {\n  return (0, _isArray2.default)(a) && (0, _isArray2.default)(b) && !(0, _shallowEqualArray.default)(a, b);\n}\n/**\n * 获取 expandAll 的 value\n * @param props\n */\n\n\nfunction getExpandAll(props) {\n  var expandAll = props.expandAll,\n      defaultExpandAll = props.defaultExpandAll;\n  return !(0, _isUndefined2.default)(expandAll) ? expandAll : defaultExpandAll;\n}\n/**\n * 获取 expandItemValues 的 value\n * @param props\n */\n\n\nfunction getExpandItemValues(props) {\n  var expandItemValues = props.expandItemValues,\n      defaultExpandItemValues = props.defaultExpandItemValues;\n\n  if (!(0, _isUndefined2.default)(expandItemValues) && Array.isArray(expandItemValues)) {\n    return expandItemValues;\n  }\n\n  if (!(0, _isUndefined2.default)(defaultExpandItemValues) && Array.isArray(defaultExpandItemValues)) {\n    return defaultExpandItemValues;\n  }\n\n  return [];\n}\n/**\n * 获取节点展开状态\n * @param node\n * @param props\n */\n\n\nfunction getExpandState(node, props) {\n  var _node$childrenKey;\n\n  var valueKey = props.valueKey,\n      childrenKey = props.childrenKey,\n      expandItemValues = props.expandItemValues;\n  var expandAll = getExpandAll(props);\n  var expand = getExpandItemValues(props).some(function (value) {\n    return (0, _shallowEqual.default)(node[valueKey], value);\n  });\n\n  if (!(0, _isUndefined2.default)(expandItemValues)) {\n    return expand;\n  } else if ((_node$childrenKey = node[childrenKey]) === null || _node$childrenKey === void 0 ? void 0 : _node$childrenKey.length) {\n    if (!(0, _isNil2.default)(node.expand)) {\n      return !!node.expand;\n    } else if (expandAll) {\n      return true;\n    }\n\n    return false;\n  }\n\n  return false;\n}\n/**\n * 获取拖拽节点及子节点的key\n * @param node\n * @param childrenKey\n * @param valueKey\n */\n\n\nfunction getDragNodeKeys(dragNode, childrenKey, valueKey) {\n  var dragNodeKeys = [dragNode[valueKey]];\n\n  var traverse = function traverse(data) {\n    if ((data === null || data === void 0 ? void 0 : data.length) > 0) {\n      data.forEach(function (node) {\n        dragNodeKeys = dragNodeKeys.concat([node[valueKey]]);\n\n        if (node[childrenKey]) {\n          traverse(node[childrenKey]);\n        }\n      });\n    }\n  };\n\n  traverse(dragNode[childrenKey]);\n  return dragNodeKeys;\n}\n\nfunction calDropNodePosition(event, treeNodeElement) {\n  var clientY = event.clientY;\n\n  var _treeNodeElement$getB = treeNodeElement.getBoundingClientRect(),\n      top = _treeNodeElement$getB.top,\n      bottom = _treeNodeElement$getB.bottom;\n\n  var gap = TREE_NODE_GAP; // 处于节点下方\n\n  if (clientY >= bottom - gap && clientY <= bottom) {\n    return _constants.TREE_NODE_DROP_POSITION.DRAG_OVER_BOTTOM;\n  } // 处于节点上方\n\n\n  if (clientY <= top + gap && clientY >= top) {\n    return _constants.TREE_NODE_DROP_POSITION.DRAG_OVER_TOP;\n  }\n\n  if (clientY >= top + gap && clientY <= bottom - gap) {\n    return _constants.TREE_NODE_DROP_POSITION.DRAG_OVER;\n  }\n\n  return -1;\n}\n\nfunction removeDragNode(data, params, _ref) {\n  var valueKey = _ref.valueKey,\n      childrenKey = _ref.childrenKey;\n  var dragNode = params.dragNode;\n\n  var traverse = function traverse(items, parent) {\n    for (var _index = 0; _index < items.length; _index += 1) {\n      var item = items[_index];\n\n      if ((0, _shallowEqual.default)(item[valueKey], dragNode[valueKey])) {\n        items.splice(_index, 1); // 当 children 为空，需要删除 children 属性，不显示角标\n\n        if (items.length === 0 && parent) {\n          delete parent.children;\n        }\n\n        break;\n      }\n\n      if (Array.isArray(item[childrenKey])) {\n        traverse(item[childrenKey], item);\n      }\n    }\n  };\n\n  traverse(data);\n}\n/**\n * 移动节点valueKey，先删除 dragNode 原本所在的数据，再将 dragNode 移动到拖动的位置\n * @param data\n * @param params\n */\n\n\nfunction createUpdateTreeDataFunction(params, _ref2) {\n  var valueKey = _ref2.valueKey,\n      childrenKey = _ref2.childrenKey;\n  return function (tree) {\n    var data = [].concat(tree);\n    var dragNode = params.dragNode,\n        dropNode = params.dropNode,\n        dropNodePosition = params.dropNodePosition;\n    removeDragNode(data, params, {\n      valueKey: valueKey,\n      childrenKey: childrenKey\n    });\n\n    var updateTree = function updateTree(items) {\n      for (var _index2 = 0; _index2 < items.length; _index2 += 1) {\n        var item = items[_index2];\n\n        if ((0, _shallowEqual.default)(item[valueKey], dropNode[valueKey])) {\n          // 拖拽到 dropNode内，作为 dropNode 的子节点\n          if (dropNodePosition === _constants.TREE_NODE_DROP_POSITION.DRAG_OVER) {\n            item[childrenKey] = (0, _isNil2.default)(item[childrenKey]) ? [] : item[childrenKey];\n            item[childrenKey].push(dragNode);\n            break;\n          } else if (dropNodePosition === _constants.TREE_NODE_DROP_POSITION.DRAG_OVER_TOP) {\n            // 拖拽到 dropNode 的上面\n            items.splice(_index2, 0, dragNode);\n            break;\n          } else if (dropNodePosition === _constants.TREE_NODE_DROP_POSITION.DRAG_OVER_BOTTOM) {\n            // 拖拽到 dropNode 的下面\n            items.splice(_index2 + 1, 0, dragNode);\n            break;\n          }\n        }\n\n        if (Array.isArray(item[childrenKey]) && item[childrenKey].length > 0) {\n          updateTree(item[childrenKey]);\n        }\n      }\n    };\n\n    updateTree(data);\n    return [].concat(data);\n  };\n}\n\nfunction findNodeOfTree(data, check) {\n  var findNode = function findNode(nodes) {\n    if (nodes === void 0) {\n      nodes = [];\n    }\n\n    for (var i = 0; i < nodes.length; i += 1) {\n      var item = nodes[i];\n\n      if ((0, _isArray2.default)(item.children)) {\n        var _node = findNode(item.children);\n\n        if (_node) {\n          return _node;\n        }\n      }\n\n      if (check(item)) {\n        return item;\n      }\n    }\n\n    return undefined;\n  };\n\n  return findNode(data);\n}\n\nfunction filterNodesOfTree(data, check) {\n  var findNodes = function findNodes(nodes) {\n    if (nodes === void 0) {\n      nodes = [];\n    }\n\n    var nextNodes = [];\n\n    for (var i = 0; i < nodes.length; i += 1) {\n      if ((0, _isArray2.default)(nodes[i].children)) {\n        var nextChildren = findNodes(nodes[i].children);\n\n        if (nextChildren.length) {\n          var item = (0, _clone2.default)(nodes[i]);\n          item.children = nextChildren;\n          nextNodes.push(item);\n          continue;\n        }\n      }\n\n      if (check(nodes[i])) {\n        nextNodes.push(nodes[i]);\n      }\n    }\n\n    return nextNodes;\n  };\n\n  return findNodes(data);\n}\n/**\n * 根据是否处于搜索状态来返回 expand 的值。如果处于搜索状态下，则展开所有的节点\n * @param searchKeyword\n * @param expand\n */\n\n\nfunction getExpandWhenSearching(searchKeyword, expand) {\n  return !(0, _isEmpty2.default)(searchKeyword) ? true : expand;\n}"]},"metadata":{},"sourceType":"script"}