{"ast":null,"code":"var _jsxFileName = \"E:\\\\Hammad\\\\FrontEnd\\\\ClientApp\\\\src\\\\components\\\\ConditionPredictionTable\\\\ConditionPredictionTable.js\";\nimport React from \"react\";\nimport \"../GynTable/gyn.style.scss\";\nimport \"./condition.scss\";\nimport { DataTable } from \"primereact/datatable\";\nimport { MultiSelect } from \"primereact/multiselect\";\nimport { Column } from \"primereact/column\";\nimport env from \"../../evn\";\nimport { Calendar } from \"primereact/calendar\";\nimport { Button } from \"primereact/button\";\nimport MButton from \"@material-ui/core/Button\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport * as moment from \"moment\";\nimport Moment from \"react-moment\";\nimport \"react-perfect-scrollbar/dist/css/styles.css\";\nimport MultiCascader from \"rsuite/lib/MultiCascader\";\nimport SettingsIcon from \"@material-ui/icons/Settings\";\nimport PerfectScrollbar from \"react-perfect-scrollbar\";\nimport { object } from \"prop-types\";\nimport * as Highcharts from \"highcharts\";\nimport HighchartsReact from \"highcharts-react-official\";\nimport Checkbox from \"../Checkbox/Checkbox\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport MuiDialogTitle from \"@material-ui/core/DialogTitle\";\nimport MuiDialogContent from \"@material-ui/core/DialogContent\";\nimport MuiDialogActions from \"@material-ui/core/DialogActions\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport CloseIcon from \"@material-ui/icons/Close\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport APIHelper from \"../../utils/apiHelper\";\nimport sample from \"../ConditionPredictionTable/sample.json\"; // var MultiCascader = require('rsuite/lib/MultiCascader');\n\nconst styles = theme => ({\n  root: {\n    margin: 0,\n    padding: theme.spacing(2)\n  },\n  closeButton: {\n    position: \"absolute\",\n    right: theme.spacing(1),\n    top: theme.spacing(1),\n    color: theme.palette.grey[500]\n  }\n});\n\nconst DialogTitle = withStyles(styles)(props => {\n  const {\n    children,\n    classes,\n    onClose,\n    ...other\n  } = props;\n  return /*#__PURE__*/React.createElement(MuiDialogTitle, Object.assign({\n    disableTypography: true,\n    className: classes.root\n  }, other, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 5\n    }\n  }), /*#__PURE__*/React.createElement(Typography, {\n    variant: \"h6\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }\n  }, children), onClose ? /*#__PURE__*/React.createElement(IconButton, {\n    \"aria-label\": \"close\",\n    className: classes.closeButton,\n    onClick: onClose,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(CloseIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 11\n    }\n  })) : null);\n});\nconst DialogContent = withStyles(theme => ({\n  root: {\n    padding: theme.spacing(2)\n  }\n}))(MuiDialogContent);\nconst DialogActions = withStyles(theme => ({\n  root: {\n    margin: 0,\n    padding: theme.spacing(1)\n  }\n}))(MuiDialogActions);\nconst baseColStyle = {\n  textAlign: \"center\",\n  padding: \"1% !important\",\n  fontSize: \"0.7rem\",\n  position: \"relative\"\n};\nconst absCenter = {\n  position: \"absolute\",\n  left: 0,\n  right: 0,\n  margin: \"auto\",\n  width: \"33px\",\n  top: 0,\n  bottom: 0,\n  height: \"33px\"\n};\nconst BASE_URL = env.baseUrl;\nconst isProd = env.isProd; // DEMO DATA\n\nconst departmentData = [{\n  DepartmentCode: \"ICU\",\n  Department: \"Intensive Care Unit\"\n}, {\n  DepartmentCode: \"AC\",\n  Department: \"Acute Care\"\n}, {\n  DepartmentCode: \"CAR\",\n  Department: \"Cardiology\"\n}];\nconst conditionData = sample;\nconst conditionList = [{\n  ConditionICD10: \"070.30\",\n  Condition: \"Hepatitis B virus infection Hepatitis B virus infection Hepatitis B virus infection Hepatitis B virus infection Hepatitis B virus infection Hepatitis B virus infection\"\n}, {\n  ConditionICD10: \"070.32\",\n  Condition: \"Chronic hepatitis B\"\n}, {\n  ConditionICD10: \"070.51\",\n  Condition: \"Hep C w/o coma, acute/NOS\"\n}, {\n  ConditionICD10: \"070.70\",\n  Condition: \"Hepatitis-C\"\n}, {\n  ConditionICD10: \"070.70\",\n  Condition: \"Syphilis\"\n} // {name: 'Paris', code: 'PRS'}\n];\n\nfunction addRows(n) {\n  for (let i = 0; i < n; i++) {\n    conditionData.push({\n      PatientMRN: 12345,\n      PatientFirstName: \"John\",\n      PatientLastName: \"Doe\",\n      ConditionType: \"Diabetes\",\n      Performance: \"PERSONBLAT=0.97, AUC=0.95, TP=0.97, TN=0.96, F1=0.97, AUC=0.95, TP=0.97, TN=0.96 ,F1=0.97, AUC=0.95, TP=0.97, TN=0.96\",\n      Department: \"Acute Care\",\n      ActualResult: \"Positive\",\n      PredictionValue: 0,\n      Probability: 93,\n      ActualResultDate: \"10/3/1990\",\n      PredictionDate: \"10/3/1990\",\n      Probability: 87\n    });\n  }\n} // addRows(50);\n// CHART OPTIONS\n\n\nconst options = {\n  title: {\n    display: true,\n    text: \"Projected distribution of conditions\"\n  }\n}; // const getOptions = ({ title }) => ({\n//   title: {\n//     display: true,\n//     text: title,\n//   },\n// });\n\nfunction gradientColor(color) {\n  return {\n    radialGradient: {\n      cx: 0.5,\n      cy: 0.3,\n      r: 0.7\n    },\n    stops: [[0, color], [1, Highcharts.color(color).brighten(-0.3).get(\"rgb\")] // darken\n    ]\n  };\n}\n\nfunction getOptions(title, data) {\n  console.log(data);\n  return {\n    chart: {\n      height: 265,\n      backgroundColor: \"transparent\",\n      plotBackgroundColor: null,\n      plotBorderWidth: null,\n      plotShadow: false,\n      type: \"pie\",\n      spacingTop: 0,\n      spacingRight: 0,\n      spacingBottom: 0,\n      spacingLeft: 0,\n      plotBorderWidth: 0\n    },\n    title: {\n      text: null,\n      style: {\n        color: \"#333333\",\n        fontSize: \"13.5px\"\n      }\n    },\n    tooltip: {\n      pointFormat: \" <b>{point.y}</b> ({point.percentage:.0f}%)\"\n    },\n    plotOptions: {\n      series: {\n        groupPadding: 0\n      },\n      pie: {\n        //size: '200px',\n        // Set point padding to 0\n        pointPadding: 0,\n        // Set group padding to 0\n        groupPadding: 0,\n        allowPointSelect: true,\n        cursor: \"pointer\",\n        dataLabels: {\n          enabled: false,\n          format: \"<b>{point.name}</b>: {point.percentage:.1f} %\",\n          connectorColor: \"silver\",\n          distance: -15\n        },\n        point: {\n          events: {\n            legendItemClick: function (a, b, c) {\n              if (this.visible == true && (this.series.data.length == 1 || this.series.data.length - 1 == this.series.data.filter(a => {\n                return a.visible == false;\n              }).length)) {\n                return false;\n              }\n\n              return true;\n            }\n          }\n        }\n      }\n    },\n    credits: {\n      enabled: false\n    },\n    xAxis: {\n      lineWidth: 0,\n      visible: false,\n      startOnTick: false,\n      endOnTick: false,\n      minPadding: 0,\n      maxPadding: 0\n    },\n    yAxis: {\n      lineWidth: 0,\n      visible: false,\n      startOnTick: false,\n      endOnTick: false\n    },\n    accessibility: {\n      point: {\n        valueSuffix: \"%\"\n      }\n    },\n    series: [{\n      name: \"Share\",\n      showInLegend: true,\n      data: data\n    }]\n  };\n}\n\nconst columns = [{\n  label: \"Patient's MRN\",\n  key: \"PatientMRN\",\n  isSelected: true\n}, {\n  label: \"Patient First Name\",\n  key: \"PatientFirstName\",\n  isSelected: true\n}, {\n  label: \"Patient Last Name\",\n  key: \"PatientLastName\",\n  isSelected: true\n}, {\n  label: \"Condition Type\",\n  key: \"ConditionType\",\n  isSelected: true\n}, //{ label: \"Prediction Value\", key: \"PredictionValue\", isSelected: true },\n{\n  label: \"Prediction, Severity (0-100%) - Short-Term\",\n  key: \"PredictionValueST\",\n  isSelected: true\n}, {\n  label: \"Est. Risk Scale - Short-Term\",\n  key: \"EstRiskScaleST\",\n  isSelected: true\n}, {\n  label: \"First Prediction Date (Severity Short-Term)\",\n  key: \"FirstSeverityST\",\n  isSelected: true\n}, {\n  label: \"Prediction, Severity (0-100%) - Mid-Term\",\n  key: \"PredictionValueMT\",\n  isSelected: true\n}, {\n  label: \"Est. Risk Scale - Mid-Term\",\n  key: \"EstRiskScaleMT\",\n  isSelected: true\n}, {\n  label: \"First Prediction Date (Severity Mid-Term)\",\n  key: \"FirstSeverityMT\",\n  isSelected: true\n}, {\n  label: \"Prediction, Severity (0-100%) - Long-Term\",\n  key: \"PredictionValueLT\",\n  isSelected: false\n}, {\n  label: \"Est. Risk Scale - Long-Term\",\n  key: \"EstRiskScaleLT\",\n  isSelected: false\n}, {\n  label: \"First Prediction Date (Severity Long-Term)\",\n  key: \"FirstSeverityLT\",\n  isSelected: false\n}, // { label: \"Est. Risk Scale\", key: \"EstRiskScale\", isSelected: true },\n// { label: \"Severity (0-100%)\", key: \"Probability\", isSelected: true },\n{\n  label: \"Updated Prediction Date\",\n  key: \"PredictionDate\",\n  isSelected: false\n}, //First Prediction Date (Severity)\n{\n  label: \"Risk Factors (by SPAI)\",\n  key: \"FeatureImportance\",\n  isSelected: false\n}, {\n  label: \"Performance\",\n  key: \"Performance\",\n  isSelected: false\n}, {\n  label: \"Actual Result\",\n  key: \"ActualResult\",\n  isSelected: true\n}, {\n  label: \"Actual Result Date\",\n  key: \"ActualResultDate\",\n  isSelected: true\n}, {\n  label: \"Location\",\n  key: \"Department\",\n  isSelected: true\n}];\nconst defaultFilter = localStorage.getItem(\"conditions\");\n\nclass ConditionPredictionTable extends React.Component {\n  constructor(props) {\n    super(props);\n    this.MAX_SELECTED = 10;\n    this.pageIndex = 0;\n    this.state = {\n      openModel: false,\n      data: isProd ? [] : conditionData,\n      // TODO : REMOVE IT\n      isAPICallRunning: false,\n      conditionTypeChartData: [],\n      actualResultChartData: [],\n      currSelected: null,\n      first: 0,\n      checkedItems: new Map(),\n      checkedColumns: {},\n      // conditionList: isProd ? [] : conditionList,\n      conditionList: [],\n      departmentList: [],\n      conditionFilter: defaultFilter ? JSON.parse(defaultFilter) : [],\n      departmentFilter: [],\n      fromFilter: null,\n      toFilter: null,\n      actualResultDateFilter: null,\n      predictionDateFilter: null\n    };\n  }\n\n  componentDidMount() {\n    // init condition list\n    if (this.state.conditionList.length < 1) this.initConditionListMeta(); // init department list\n\n    if (!this.state.departmentList.length) this.initDepartmentList(); // mapping data for pie chart\n\n    this.initChartData(this.state.data);\n    this.prepareColumns();\n  } // HELPERS\n\n\n  getDatesFilters() {\n    let dates = null; // if fromDate and toDate is exist (the user select range)\n\n    if (this.state.fromFilter && this.state.toFilter) {\n      // set dates with format \"YYYY-MM-DD\" - it means YEAR-MONTH-DAY\n      dates = {\n        fromDate: moment(this.state.fromFilter).format(\"YYYY-MM-DD\").toString(),\n        toDate: moment(this.state.toFilter).format(\"YYYY-MM-DD\").toString()\n      };\n    }\n\n    return dates;\n  }\n\n  initConditionListMeta() {\n    // TODO: MAKE SURE THAT IS THE URL\n    console.log(\"initConditionListMeta\");\n    const url = `/meta/list`; // if (isProd) {\n\n    APIHelper(url).then(data => {\n      // console.log(\"conditionList :\", data);\n      const formatedMenu = this.formatConditionListMenu(data);\n      this.setState({\n        conditionList: formatedMenu\n      });\n    }); // }\n  } // format the menu for conditionlist\n  // formatConditionListMenu = data => data.filter((v, i, a) => a.findIndex(t => (t.moduleType === v.moduleType)) === i)\n  //   .map(meta => ({\n  //     value: meta.moduletype,\n  //     label: meta.moduletype,\n  //     children: data.filter(v => v.moduletype === meta.moduletype).map(meta => ({ value: meta.ConditionICD10, label: meta.Condition }))\n  //   }));\n\n\n  formatConditionListMenu(data) {\n    var conditionList = [...new Set(data.map(item => item.moduletype))];\n    return conditionList.map(m => ({\n      value: m,\n      label: m,\n      children: data.filter(v => v.moduletype === m).map(meta => ({\n        value: meta.ConditionICD10,\n        label: meta.Condition\n      }))\n    }));\n  }\n\n  initDepartmentList() {\n    const url = `/department/list`;\n\n    if (isProd) {\n      APIHelper(url).then(data => {\n        console.log(\"departmentList :\", data);\n        this.setState({\n          departmentList: data\n        });\n      });\n    } else {\n      APIHelper(url).then(data => {\n        if (data && data.length && data.length > 0) {\n          console.log(\"departmentList :\", data);\n          this.setState({\n            departmentList: data\n          });\n        }\n      });\n    }\n  }\n\n  datesBodyTemplate(rowData, key) {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, rowData[key] && /*#__PURE__*/React.createElement(Moment, {\n      format: \"YYYY/MM/DD HH:MM:SS\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 421,\n        columnNumber: 11\n      }\n    }, rowData[key]));\n  }\n\n  datesBodyTemplateFroFirstPredection(rowData, key) {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, rowData[key] && this.renderFirstPredection(rowData, key));\n  }\n\n  renderFirstPredection(rowData, key) {\n    return moment(rowData[key]).format(\"YYYY/MM/DD HH:MM:SS\").toString() + (rowData[\"FirstSeverity\"] ? \" (\" + rowData[\"FirstSeverity\"].toString() + \")\" : \"\");\n  }\n\n  onFilterChange(e, filter) {\n    this.setState({\n      [filter]: e.value\n    });\n  }\n\n  onSearch() {\n    // BUILD URL\n    let url = `/conditionprediction?`; // handle conditions filters\n\n    const conditions = this.state.conditionFilter;\n\n    if (conditions.length > 0) {\n      const moduleTypes = [];\n      const conditionTypes = [];\n      conditions.forEach(condition => {\n        const getModuleIndex = this.state.conditionList.findIndex(val => val.value === condition);\n\n        if (getModuleIndex !== -1) {\n          this.state.conditionList[getModuleIndex].children.forEach(val => {\n            conditionTypes.push(val.value);\n          });\n          moduleTypes.push(condition);\n        } else {\n          const module = this.state.conditionList.filter(val => {\n            return val.children.filter(v => v.value === condition) !== -1;\n          });\n\n          if (module.length > 0) {\n            if (!moduleTypes.includes(module[0].value)) moduleTypes.push(module[0].value);\n            conditionTypes.push(condition);\n          }\n        }\n      });\n      localStorage.setItem(\"conditions\", JSON.stringify(conditions));\n      url += `moduleType=${moduleTypes.join(\",\")}&conditionType=${conditionTypes.join(\",\")}&`;\n    } // handle departments filters\n\n\n    const departments = this.state.departmentFilter.toString();\n    if (departments) url += `department=${departments}&`; // handle dates filters\n\n    const dates = this.getDatesFilters();\n    if (dates) url += `startDate=${dates.fromDate}&endDate=${dates.toDate}`;\n    console.log(\"url :\", url);\n    this.lastSearchUrl = url;\n    this.pageIndex = 0;\n    url += `&page=${this.pageIndex}`; // only for test here\n\n    if (isProd) {\n      this.setState({\n        isAPICallRunning: true\n      }); // send request to the server\n\n      APIHelper(url).then(data => {\n        this.setState({\n          isAPICallRunning: false\n        });\n\n        if (data && !data.length) {\n          return;\n        } // var lastData = { key: '', value: null }, o = null;\n        // data.map(d => {\n        //   o = data.filter(f => f.PatientMRN == d.PatientMRN && f.ConditionType == d.ConditionType && f.PredictionDate).sort((a, b) => b.PredictionDate - a.PredictionDate)[0];\n        //   if (o) {\n        //     d.FirstPredictionDate = o.PredictionDate;\n        //     d.FirstProbability = o.Probability ? \" (\" + o.Probability + \")\" : null;\n        //   }\n        // });\n        // get data from the server\n        //   data = data.map((o, index) => {\n        //     if (index == 0) o.EstRiskScale = \"low\";\n        //     else if (index == 1) o.EstRiskScale = \"medium high\";\n        //     else if (index == 2) o.EstRiskScale = \"high\";\n        //     else o.EstRiskScale = \"medium low\";\n        //     return o;\n        //   });\n\n\n        console.log(\"FILTERED DATA :\", data);\n        this.addCustomColumns(data);\n        this.setState({\n          data: data\n        });\n        this.setState({\n          first: 0\n        });\n        this.initChartData(data);\n      }).catch(err => {\n        this.setState({\n          isAPICallRunning: false\n        });\n        console.log(\" err :\", err);\n      });\n    } else {\n      this.setState({\n        isAPICallRunning: true\n      });\n      setTimeout(() => {\n        this.setState({\n          isAPICallRunning: false\n        });\n      }, 3000);\n    }\n  }\n\n  addCustomColumns(data) {\n    data.map(item => {\n      if (!item) return;\n      item.EstRiskScaleSTInNum = this.getEstRiskScalOrder(item.EstRiskScaleST);\n      item.EstRiskScaleMTInNum = this.getEstRiskScalOrder(item.EstRiskScaleMT);\n      item.EstRiskScaleLTInNum = this.getEstRiskScalOrder(item.EstRiskScaleLT);\n    });\n  }\n\n  getEstRiskScalOrder(value) {\n    if (!value) return 1;\n    let ord = 1;\n\n    switch (value.toLocaleLowerCase()) {\n      case \"high\":\n        ord = 5;\n        break;\n\n      case \"medium high\":\n        ord = 4;\n        break;\n\n      case \"medium\":\n        ord = 3;\n        break;\n\n      case \"low medium\":\n      case \"medium low\":\n        ord = 2;\n        break;\n\n      case \"low\":\n        ord = 1;\n        break;\n\n      default:\n        break;\n    }\n\n    return ord;\n  }\n\n  initNextPageData() {\n    this.pageIndex++;\n    let url = `${this.lastSearchUrl}&page=${this.pageIndex}`;\n    console.log(\"url :\", url);\n\n    if (isProd) {\n      APIHelper(url).then(data => {\n        this.setState({\n          data: this.state.data.concat(data)\n        });\n      });\n    } else {\n      addRows(50);\n    }\n  }\n\n  setConditionFilter(c) {}\n\n  handleClickOpen() {\n    this.setState({\n      openModel: true\n    });\n    this.prepareColumns();\n  }\n\n  handleClose(isSave) {\n    this.setState({\n      openModel: false\n    });\n\n    if (isSave) {\n      this.saveColumns();\n    }\n  }\n\n  handleColumnChange(e) {\n    const item = e.target.name;\n    const isChecked = e.target.checked;\n    this.setState(prevState => ({\n      checkedItems: prevState.checkedItems.set(item, isChecked)\n    }));\n  }\n\n  prepareColumns() {\n    var selectedColumns = localStorage.getItem(\"selected_columns_v3\");\n    if (selectedColumns) selectedColumns = JSON.parse(selectedColumns);else selectedColumns = this.defaultColumns();\n    var checkMap = new Map();\n\n    for (const key in selectedColumns) {\n      checkMap.set(key, selectedColumns[key]);\n    }\n\n    this.setState({\n      checkedColumns: selectedColumns,\n      checkedItems: checkMap\n    });\n  }\n\n  saveColumns() {\n    var selectedColumns = this.defaultColumns();\n    this.state.checkedItems.forEach((value, key) => {\n      selectedColumns[key] = value;\n    });\n    this.setState({\n      checkedColumns: selectedColumns\n    });\n    localStorage.setItem(\"selected_columns_v3\", JSON.stringify(selectedColumns));\n  }\n\n  defaultColumns() {\n    var selectedColumns = {};\n    columns.map(c => {\n      selectedColumns[c.key] = c.isSelected;\n    });\n    return selectedColumns;\n  }\n\n  renderDateFilter(key) {\n    const onChange = event => {\n      this.dt.filter(event.value, key, \"equals\");\n      this.setState({\n        [key]: event.value\n      });\n    };\n\n    const onClear = event => {\n      this.dt.filter(null, key, \"equals\");\n      this.setState({\n        [key]: null\n      });\n    };\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        display: \"flex\",\n        alignItems: \"center\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 641,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Calendar, {\n      value: this.state[key],\n      onChange: onChange,\n      selectionMode: \"single\",\n      hideOnDateTimeSelect: true,\n      readOnlyInput: false,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 642,\n        columnNumber: 9\n      }\n    }), this.state[key] && /*#__PURE__*/React.createElement(\"i\", {\n      onClick: onClear,\n      className: \"pi pi-times\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 649,\n        columnNumber: 29\n      }\n    }));\n  }\n\n  onCurrSelectedChanged(item) {\n    // get data for the over time graph (the line chart)\n    const dataForOverTime = this.state.data.filter(row => row.PatientMRN === item.PatientMRN //&& row.ConditionType === item.ConditionType #Commented On 14 Aug - Severity of Illness over time (per Condition-Patient) Changes\n    ); // set dataForOverTime in the parent component (App.js)\n\n    this.props.setProbabilityDataOverTime(dataForOverTime); // set current selected in current component\n\n    this.setState({\n      currSelected: item\n    }); // emit on selected change event in parent component\n  }\n\n  initChartData(data) {\n    const conditionTypeCounters = {};\n    const actualResultCounters = {};\n    data.map(item => {\n      if (item.PredictionValueST == 1) {\n        if (!conditionTypeCounters[item.ConditionType]) conditionTypeCounters[item.ConditionType] = 0;\n        conditionTypeCounters[item.ConditionType]++;\n      }\n\n      if (item.ActualResult.toLowerCase() === \"positive\") {\n        if (!actualResultCounters[item.ConditionType]) actualResultCounters[item.ConditionType] = 0;\n        actualResultCounters[item.ConditionType]++;\n      }\n    });\n    console.log(\"counters :\", conditionTypeCounters);\n\n    const generateData = (counters, colors) => ({\n      labels: Object.keys(counters),\n      datasets: [{\n        data: Object.values(counters),\n        backgroundColor: colors,\n        hoverBackgroundColor: colors\n      }]\n    });\n\n    var conTypeColors = [\"#33557f\", \"#3a6090\", \"#416b9f\", \"#4773ab\", \"#4c7cb8\", \"#668cc2\", \"#8ba3cc\", \"#a3b5d4\", \"#b9c6dd\", \"#cdd5e7\", \"#dfecf4\", \"#ffffff\"];\n    var actualResulColor = [\"#173057\", \"#543b74\", \"#92407d\", \"#cd4975\", \"#f4625e\", \"#fe8e3a\", \"#fec106\", \"#a3b5d4\", \"#b9c6dd\", \"#cdd5e7\", \"#dfecf4\", \"#ffffff\"];\n    const conditionTypeChartData = [];\n    var i = 0;\n\n    for (const key in conditionTypeCounters) {\n      conditionTypeChartData.push({\n        name: key,\n        y: conditionTypeCounters[key],\n        color: gradientColor(conTypeColors[i]),\n        selected: i == 0\n      });\n      i++;\n    }\n\n    i = 0;\n    const actualResultChartData = [];\n\n    for (const key in actualResultCounters) {\n      actualResultChartData.push({\n        name: key,\n        y: actualResultCounters[key],\n        color: gradientColor(actualResulColor[i]),\n        selected: i == 0\n      });\n      i++;\n    }\n\n    this.setState({\n      conditionTypeChartData: conditionTypeChartData\n    });\n    this.setState({\n      actualResultChartData: actualResultChartData\n    });\n    console.log(\"conditionTypeChartData :\", conditionTypeChartData);\n    console.log(\"actualResultChartData :\", actualResultChartData);\n  }\n\n  formatPrediction(value) {\n    if (!value || typeof value != \"number\") return value;\n    return value.toFixed('1');\n  }\n\n  onPage(e) {\n    // {first: 55, rows: 5, page: 11, pageCount: 12}\n    // let isLastPage = e.page === e.pageCount - 1;\n    // if (isLastPage) {\n    //   //    need to load more data here;\n    //   this.initNextPageData();\n    // }\n    console.log(\"e :\", e);\n    this.setState({\n      first: e.first\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 776,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"gyn-table-container main-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 777,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"header\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 778,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 779,\n        columnNumber: 13\n      }\n    }, \"Profile Assessment driven by SPAI\"), /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        display: \"flex\",\n        alignItems: \"center\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 780,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(MultiCascader, {\n      data: this.state.conditionList,\n      style: {\n        minWidth: \"250px\",\n        position: \"relative\",\n        marginRight: \"15px\"\n      },\n      onChange: conditionFilter => this.setState({\n        conditionFilter\n      }),\n      value: this.state.conditionFilter,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 781,\n        columnNumber: 15\n      }\n    }), /*#__PURE__*/React.createElement(Calendar, {\n      value: this.state.fromFilter,\n      showTime: true,\n      hideOnDateTimeSelect: true,\n      style: {\n        marginRight: \"15px\"\n      },\n      onChange: e => this.onFilterChange(e, \"fromFilter\"),\n      placeholder: \"Date Range - From\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 808,\n        columnNumber: 15\n      }\n    }), /*#__PURE__*/React.createElement(Calendar, {\n      value: this.state.toFilter,\n      showTime: true,\n      minDate: new Date(this.state.fromFilter),\n      hideOnDateTimeSelect: true,\n      style: {\n        marginRight: \"15px\"\n      },\n      onChange: e => this.onFilterChange(e, \"toFilter\"),\n      placeholder: \"Date Range - To\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 816,\n        columnNumber: 15\n      }\n    }), /*#__PURE__*/React.createElement(MultiSelect, {\n      value: this.state.departmentFilter,\n      options: this.state.departmentList,\n      onChange: e => e.value.length <= this.MAX_SELECTED && this.setState({\n        departmentFilter: e.value\n      }),\n      style: {\n        minWidth: \"12em\",\n        marginRight: \"15px\"\n      },\n      filter: true,\n      maxSelectedLabels: 2,\n      filterPlaceholder: \"Search\",\n      placeholder: \"Choose Departments\",\n      optionLabel: \"Department\",\n      optionValue: \"DepartmentCode\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 826,\n        columnNumber: 15\n      }\n    }), /*#__PURE__*/React.createElement(Button, {\n      label: \"Search\",\n      style: {\n        display: this.state.isAPICallRunning ? \"none\" : \"inline-flex\"\n      },\n      onClick: () => {\n        this.onSearch();\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 841,\n        columnNumber: 15\n      }\n    }), /*#__PURE__*/React.createElement(MButton, {\n      variant: \"contained\",\n      color: \"primary\",\n      className: \"btnProgress\",\n      style: {\n        borderRadius: 3,\n        textTransform: \"none\",\n        marginLeft: \"5px\",\n        opacity: \"0.7\",\n        display: !this.state.isAPICallRunning ? \"none\" : \"inline-flex\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 850,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(CircularProgress, {\n      color: \"primary\",\n      size: \"1.5rem\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 864,\n        columnNumber: 17\n      }\n    }), \"\\xA0\\xA0Processing..\"))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"content\",\n      style: {\n        paddingTop: \"30px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 870,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"table\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 871,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"a\", {\n      onClick: e => this.handleClickOpen(),\n      className: \"float-right\",\n      style: {\n        cursor: \"pointer\",\n        display: \"inline-flex\",\n        float: \"right\",\n        clear: \"both\",\n        marginBottom: \"5px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 872,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(SettingsIcon, {\n      style: {\n        width: \"18px\",\n        height: \"17px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 883,\n        columnNumber: 17\n      }\n    }), \"\\xA0Choose Columns\"), /*#__PURE__*/React.createElement(DataTable, {\n      ref: el => this.dt = el,\n      value: this.state.data,\n      sortMode: \"multiple\",\n      selectionMode: \"single\",\n      multiSortMeta: [{\n        field: \"PredictionDate\",\n        order: -1\n      }, {\n        field: \"EstRiskScaleSTInNum\",\n        order: -1\n      }],\n      paginator: true,\n      rows: 5,\n      first: this.state.first,\n      sortX: true,\n      selection: this.state.currSelected,\n      onSelectionChange: e => this.onCurrSelectedChanged(e.value),\n      onPage: e => this.onPage(e),\n      emptyMessage: \"No Results found\",\n      currentPageReportTemplate: \"Showing {first} to {last} of {totalRecords} items\",\n      paginatorTemplate: \"FirstPageLink PrevPageLink PageLinks NextPageLink LastPageLink CurrentPageReport\",\n      rowsPerPageOptions: [5, 10, 25, 50],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 887,\n        columnNumber: 15\n      }\n    }, this.state.checkedColumns && this.state.checkedColumns.PatientMRN === true && /*#__PURE__*/React.createElement(Column, {\n      field: \"PatientMRN\",\n      sortField: \"PatientMRN\",\n      filter: true,\n      header: \"Patient's MRN\",\n      sortable: true,\n      style: baseColStyle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 916,\n        columnNumber: 21\n      }\n    }), this.state.checkedColumns && this.state.checkedColumns.PatientFirstName === true && /*#__PURE__*/React.createElement(Column, {\n      field: \"PatientFirstName\",\n      filter: true,\n      header: \"Patient First Name\",\n      sortable: true,\n      style: baseColStyle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 928,\n        columnNumber: 21\n      }\n    }), this.state.checkedColumns && this.state.checkedColumns.PatientLastName === true && /*#__PURE__*/React.createElement(Column, {\n      field: \"PatientLastName\",\n      filter: true,\n      header: \"Patient Last Name\",\n      sortable: true,\n      style: baseColStyle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 939,\n        columnNumber: 21\n      }\n    }), this.state.checkedColumns && this.state.checkedColumns.ConditionType === true && /*#__PURE__*/React.createElement(Column, {\n      field: \"ConditionType\",\n      filter: true,\n      header: \"Condition Type\",\n      sortable: true,\n      style: {\n        baseColStyle,\n        width: \"150px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 950,\n        columnNumber: 21\n      }\n    }), this.state.checkedColumns && this.state.checkedColumns.PredictionValueST === true && /*#__PURE__*/React.createElement(Column, {\n      field: \"PredictionValueST\",\n      filter: true,\n      header: \"Prediction, Severity (0-100%) - Short-Term\",\n      sortable: true,\n      style: {\n        baseColStyle,\n        textAlign: 'center'\n      },\n      allowOverflow: true,\n      body: rowData => /*#__PURE__*/React.createElement(\"span\", {\n        style: {\n          width: '70px'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 992,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        className: `status-label status-${rowData.PredictionValueST == 1 ? \"positive\" : \"negative\"}`,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 993,\n          columnNumber: 27\n        }\n      }, rowData.PredictionValueST), /*#__PURE__*/React.createElement(\"span\", {\n        style: {\n          width: '35px',\n          fontWeight: \"bold\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 994,\n          columnNumber: 27\n        }\n      }, \"\\xA0, \", this.formatPrediction(rowData.ProbabilityST))),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 984,\n        columnNumber: 21\n      }\n    }), this.state.checkedColumns && this.state.checkedColumns.EstRiskScaleST === true && /*#__PURE__*/React.createElement(Column, {\n      field: \"EstRiskScaleSTInNum\",\n      filter: true,\n      header: \"Est. Risk Scale - Short-Term\",\n      sortable: true,\n      style: {\n        baseColStyle,\n        width: \"100px\"\n      },\n      body: rowData => /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1009,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        id: rowData.EstRiskScaleST && rowData.EstRiskScaleST.toLocaleLowerCase(),\n        className: `est-risk-scale`,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1010,\n          columnNumber: 27\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        className: \"spantext\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1011,\n          columnNumber: 29\n        }\n      }, rowData.EstRiskScaleST && rowData.EstRiskScaleST.toLocaleLowerCase()))),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1002,\n        columnNumber: 21\n      }\n    }), this.state.checkedColumns && this.state.checkedColumns.FirstSeverityST === true && /*#__PURE__*/React.createElement(Column, {\n      field: \"FirstSeverityST\",\n      filter: true,\n      header: \"First Prediction Date (Severity Short-Term)\",\n      sortable: true,\n      body: rowData => /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1027,\n          columnNumber: 23\n        }\n      }, rowData.FirstPreditionDate && moment(rowData.FirstPreditionDate).format(\"YYYY/MM/DD HH:MM:SS\").toString(), rowData.FirstSeverityST && /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1030,\n          columnNumber: 27\n        }\n      }, /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1030,\n          columnNumber: 33\n        }\n      }), ' (' + rowData.FirstSeverityST + ')')),\n      style: {\n        baseColStyle,\n        width: \"150px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1021,\n        columnNumber: 19\n      }\n    }), this.state.checkedColumns && this.state.checkedColumns.PredictionValueMT === true && /*#__PURE__*/React.createElement(Column, {\n      field: \"PredictionValueMT\",\n      filter: true,\n      header: \"Prediction, Severity (0-100%) - Mid-Term\",\n      sortable: true,\n      style: {\n        baseColStyle,\n        textAlign: 'center'\n      },\n      allowOverflow: true,\n      body: rowData => /*#__PURE__*/React.createElement(\"span\", {\n        style: {\n          width: '70px'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1050,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        className: `status-label status-${rowData.PredictionValueMT == 1 ? \"positive\" : \"negative\"}`,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1051,\n          columnNumber: 27\n        }\n      }, rowData.PredictionValueMT), /*#__PURE__*/React.createElement(\"span\", {\n        style: {\n          width: '35px',\n          fontWeight: \"bold\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1052,\n          columnNumber: 27\n        }\n      }, \"\\xA0, \", this.formatPrediction(rowData.ProbabilityMT))),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1042,\n        columnNumber: 21\n      }\n    }), this.state.checkedColumns && this.state.checkedColumns.EstRiskScaleMT === true && /*#__PURE__*/React.createElement(Column, {\n      field: \"EstRiskScaleMTInNum\",\n      filter: true,\n      header: \"Est. Risk Scale - Mid-Term\",\n      sortable: true,\n      style: {\n        baseColStyle,\n        width: \"100px\"\n      },\n      body: rowData => /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1067,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        id: rowData.EstRiskScaleMT && rowData.EstRiskScaleMT.toLocaleLowerCase(),\n        className: `est-risk-scale`,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1068,\n          columnNumber: 27\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        className: \"spantext\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1069,\n          columnNumber: 29\n        }\n      }, rowData.EstRiskScaleMT && rowData.EstRiskScaleMT.toLocaleLowerCase()))),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1060,\n        columnNumber: 21\n      }\n    }), this.state.checkedColumns && this.state.checkedColumns.FirstSeverityMT === true && /*#__PURE__*/React.createElement(Column, {\n      field: \"FirstSeverityMT\",\n      filter: true,\n      header: \"First Prediction Date (Severity Mid-Term)\",\n      sortable: true,\n      body: rowData => /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1085,\n          columnNumber: 23\n        }\n      }, rowData.FirstPreditionDate && moment(rowData.FirstPreditionDate).format(\"YYYY/MM/DD HH:MM:SS\").toString(), rowData.FirstSeverityMT && /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1088,\n          columnNumber: 27\n        }\n      }, /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1088,\n          columnNumber: 33\n        }\n      }), ' (' + rowData.FirstSeverityMT + ')')),\n      style: {\n        baseColStyle,\n        width: \"150px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1079,\n        columnNumber: 19\n      }\n    }), this.state.checkedColumns && this.state.checkedColumns.PredictionValueLT === true && /*#__PURE__*/React.createElement(Column, {\n      field: \"PredictionValueLT\",\n      filter: true,\n      header: \"Prediction, Severity (0-100%) - Long-Term\",\n      sortable: true,\n      style: {\n        baseColStyle,\n        textAlign: 'center'\n      },\n      allowOverflow: true,\n      body: rowData => /*#__PURE__*/React.createElement(\"span\", {\n        style: {\n          width: '70px'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1107,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        className: `status-label status-${rowData.PredictionValueLT == 1 ? \"positive\" : \"negative\"}`,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1108,\n          columnNumber: 27\n        }\n      }, rowData.PredictionValueLT), /*#__PURE__*/React.createElement(\"span\", {\n        style: {\n          width: '35px',\n          fontWeight: \"bold\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1109,\n          columnNumber: 27\n        }\n      }, \"\\xA0, \", this.formatPrediction(rowData.ProbabilityLT))),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1099,\n        columnNumber: 21\n      }\n    }), this.state.checkedColumns && this.state.checkedColumns.EstRiskScaleLT === true && /*#__PURE__*/React.createElement(Column, {\n      field: \"EstRiskScaleLTInNum\",\n      filter: true,\n      header: \"Est. Risk Scale - Long-Term\",\n      sortable: true,\n      style: {\n        baseColStyle,\n        width: \"100px\"\n      },\n      body: rowData => /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1126,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        id: rowData.EstRiskScaleLT && rowData.EstRiskScaleLT.toLocaleLowerCase(),\n        className: `est-risk-scale`,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1127,\n          columnNumber: 27\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        className: \"spantext\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1128,\n          columnNumber: 29\n        }\n      }, rowData.EstRiskScaleLT && rowData.EstRiskScaleLT.toLocaleLowerCase()))),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1119,\n        columnNumber: 21\n      }\n    }), this.state.checkedColumns && this.state.checkedColumns.FirstSeverityLT === true && /*#__PURE__*/React.createElement(Column, {\n      field: \"FirstSeverityLT\",\n      filter: true,\n      header: \"First Prediction Date (Severity Long-Term)\",\n      sortable: true,\n      body: rowData => /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1143,\n          columnNumber: 23\n        }\n      }, rowData.FirstPreditionDate && moment(rowData.FirstPreditionDate).format(\"YYYY/MM/DD HH:MM:SS\").toString(), rowData.FirstSeverityLT && /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1146,\n          columnNumber: 27\n        }\n      }, /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1146,\n          columnNumber: 33\n        }\n      }), ' (' + rowData.FirstSeverityLT + ')')),\n      style: {\n        baseColStyle,\n        width: \"150px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1137,\n        columnNumber: 19\n      }\n    }), this.state.checkedColumns && this.state.checkedColumns.PredictionDate === true && /*#__PURE__*/React.createElement(Column, {\n      field: \"PredictionDate\",\n      filter: true,\n      filterElement: this.renderDateFilter(\"PredictionDate\"),\n      body: rowData => this.datesBodyTemplate(rowData, \"PredictionDate\"),\n      header: \"Updated Prediction Date\",\n      sortable: true,\n      style: { ...baseColStyle,\n        overflow: \"inherit\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1155,\n        columnNumber: 21\n      }\n    }), this.state.checkedColumns && this.state.checkedColumns.FeatureImportance === true && /*#__PURE__*/React.createElement(Column, {\n      field: \"FeatureImportance\",\n      filter: true,\n      body: rowData => /*#__PURE__*/React.createElement(PerfectScrollbar, {\n        style: {\n          maxHeight: \"80px\",\n          maxWidth: \"120px\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1177,\n          columnNumber: 25\n        }\n      }, rowData.FeatureImportance),\n      header: \"Risk Factors (by SPAI)\",\n      sortable: true,\n      style: { ...baseColStyle,\n        width: \"100px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1173,\n        columnNumber: 21\n      }\n    }), this.state.checkedColumns && this.state.checkedColumns.Performance === true && /*#__PURE__*/React.createElement(Column, {\n      field: \"Performance\",\n      filter: true,\n      body: rowData => /*#__PURE__*/React.createElement(PerfectScrollbar, {\n        style: {\n          maxHeight: \"80px\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1195,\n          columnNumber: 25\n        }\n      }, rowData.Performance),\n      header: \"Performance\",\n      sortable: true,\n      style: { ...baseColStyle,\n        overflow: \"scroll\",\n        width: \"10%\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1191,\n        columnNumber: 21\n      }\n    }), this.state.checkedColumns && this.state.checkedColumns.ActualResult === true && /*#__PURE__*/React.createElement(Column, {\n      field: \"ActualResult\",\n      filter: true,\n      header: \"Actual Result\",\n      sortable: true,\n      style: { ...baseColStyle,\n        width: \"10%\"\n      },\n      body: rowData => /*#__PURE__*/React.createElement(\"span\", {\n        className: `status-label status-${rowData.ActualResult && rowData.ActualResult.toLocaleLowerCase()}`,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1218,\n          columnNumber: 25\n        }\n      }, rowData.ActualResult),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1211,\n        columnNumber: 21\n      }\n    }), this.state.checkedColumns && this.state.checkedColumns.ActualResultDate === true && /*#__PURE__*/React.createElement(Column, {\n      field: \"ActualResultDate\",\n      filter: true,\n      filterElement: this.renderDateFilter(\"ActualResultDate\"),\n      body: rowData => this.datesBodyTemplate(rowData, \"ActualResultDate\"),\n      header: \"Actual Result Date\",\n      sortable: true,\n      style: { ...baseColStyle,\n        overflow: \"inherit\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1231,\n        columnNumber: 21\n      }\n    }), this.state.checkedColumns && this.state.checkedColumns.Department === true && /*#__PURE__*/React.createElement(Column, {\n      field: \"Department\",\n      filter: true,\n      header: \"Location\",\n      sortable: true,\n      style: baseColStyle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1245,\n        columnNumber: 21\n      }\n    }))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"chart\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1256,\n        columnNumber: 13\n      }\n    }, this.state.conditionTypeChartData && this.state.conditionTypeChartData.length > 0 && /*#__PURE__*/React.createElement(\"section\", {\n      style: {\n        width: \"100%\",\n        position: \"relative\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1260,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      style: {\n        fontWeight: \"normal\",\n        marginTop: \"2px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1261,\n        columnNumber: 21\n      }\n    }, \"Projected distribution of conditions\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"projected-distribution\",\n      style: {\n        position: \"relative\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1264,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(HighchartsReact, {\n      highcharts: Highcharts,\n      options: getOptions(\"Projected distribution of conditions\", this.state.conditionTypeChartData),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1268,\n        columnNumber: 23\n      }\n    }))), this.state.actualResultChartData.length > 0 && /*#__PURE__*/React.createElement(\"section\", {\n      style: {\n        width: \"100%\",\n        position: \"relative\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1279,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      style: {\n        fontWeight: \"normal\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1280,\n        columnNumber: 19\n      }\n    }, \"Actual Distribution of conditions\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"actual-distribution\",\n      style: {\n        position: \"relative\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1283,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(HighchartsReact, {\n      highcharts: Highcharts,\n      options: getOptions(\"Actual Distribution of conditions\", this.state.actualResultChartData),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1287,\n        columnNumber: 21\n      }\n    })))))), /*#__PURE__*/React.createElement(Dialog, {\n      onClose: e => this.handleClose(),\n      \"aria-labelledby\": \"customized-dialog-title\",\n      open: this.state.openModel,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1308,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(DialogTitle, {\n      id: \"customized-dialog-title\",\n      onClose: e => this.handleClose(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1313,\n        columnNumber: 11\n      }\n    }, \"Choose Columns\"), /*#__PURE__*/React.createElement(DialogContent, {\n      dividers: true,\n      style: {\n        width: 400\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1319,\n        columnNumber: 11\n      }\n    }, columns.map(item => /*#__PURE__*/React.createElement(\"label\", {\n      key: item.key,\n      style: {\n        display: \"block\"\n      },\n      className: \"checkbox-list\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1321,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(Checkbox, {\n      name: item.key,\n      checked: this.state.checkedItems.get(item.key),\n      onChange: e => this.handleColumnChange(e),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1326,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1331,\n        columnNumber: 17\n      }\n    }, \"\\xA0\", item.label)))), /*#__PURE__*/React.createElement(DialogActions, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1335,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(MButton, {\n      onClick: e => this.handleClose(true),\n      color: \"primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1336,\n        columnNumber: 13\n      }\n    }, \"Save changes\"))));\n  }\n\n}\n\nexport default ConditionPredictionTable;","map":{"version":3,"sources":["E:/Hammad/FrontEnd/ClientApp/src/components/ConditionPredictionTable/ConditionPredictionTable.js"],"names":["React","DataTable","MultiSelect","Column","env","Calendar","Button","MButton","CircularProgress","moment","Moment","MultiCascader","SettingsIcon","PerfectScrollbar","object","Highcharts","HighchartsReact","Checkbox","Dialog","MuiDialogTitle","MuiDialogContent","MuiDialogActions","IconButton","CloseIcon","Typography","withStyles","APIHelper","sample","styles","theme","root","margin","padding","spacing","closeButton","position","right","top","color","palette","grey","DialogTitle","props","children","classes","onClose","other","DialogContent","DialogActions","baseColStyle","textAlign","fontSize","absCenter","left","width","bottom","height","BASE_URL","baseUrl","isProd","departmentData","DepartmentCode","Department","conditionData","conditionList","ConditionICD10","Condition","addRows","n","i","push","PatientMRN","PatientFirstName","PatientLastName","ConditionType","Performance","ActualResult","PredictionValue","Probability","ActualResultDate","PredictionDate","options","title","display","text","gradientColor","radialGradient","cx","cy","r","stops","brighten","get","getOptions","data","console","log","chart","backgroundColor","plotBackgroundColor","plotBorderWidth","plotShadow","type","spacingTop","spacingRight","spacingBottom","spacingLeft","style","tooltip","pointFormat","plotOptions","series","groupPadding","pie","pointPadding","allowPointSelect","cursor","dataLabels","enabled","format","connectorColor","distance","point","events","legendItemClick","a","b","c","visible","length","filter","credits","xAxis","lineWidth","startOnTick","endOnTick","minPadding","maxPadding","yAxis","accessibility","valueSuffix","name","showInLegend","columns","label","key","isSelected","defaultFilter","localStorage","getItem","ConditionPredictionTable","Component","constructor","MAX_SELECTED","pageIndex","state","openModel","isAPICallRunning","conditionTypeChartData","actualResultChartData","currSelected","first","checkedItems","Map","checkedColumns","departmentList","conditionFilter","JSON","parse","departmentFilter","fromFilter","toFilter","actualResultDateFilter","predictionDateFilter","componentDidMount","initConditionListMeta","initDepartmentList","initChartData","prepareColumns","getDatesFilters","dates","fromDate","toString","toDate","url","then","formatedMenu","formatConditionListMenu","setState","Set","map","item","moduletype","m","value","v","meta","datesBodyTemplate","rowData","datesBodyTemplateFroFirstPredection","renderFirstPredection","onFilterChange","e","onSearch","conditions","moduleTypes","conditionTypes","forEach","condition","getModuleIndex","findIndex","val","module","includes","setItem","stringify","join","departments","lastSearchUrl","addCustomColumns","catch","err","setTimeout","EstRiskScaleSTInNum","getEstRiskScalOrder","EstRiskScaleST","EstRiskScaleMTInNum","EstRiskScaleMT","EstRiskScaleLTInNum","EstRiskScaleLT","ord","toLocaleLowerCase","initNextPageData","concat","setConditionFilter","handleClickOpen","handleClose","isSave","saveColumns","handleColumnChange","target","isChecked","checked","prevState","set","selectedColumns","defaultColumns","checkMap","renderDateFilter","onChange","event","dt","onClear","alignItems","onCurrSelectedChanged","dataForOverTime","row","setProbabilityDataOverTime","conditionTypeCounters","actualResultCounters","PredictionValueST","toLowerCase","generateData","counters","colors","labels","Object","keys","datasets","values","hoverBackgroundColor","conTypeColors","actualResulColor","y","selected","formatPrediction","toFixed","onPage","render","minWidth","marginRight","Date","borderRadius","textTransform","marginLeft","opacity","paddingTop","float","clear","marginBottom","el","field","order","fontWeight","ProbabilityST","FirstSeverityST","FirstPreditionDate","PredictionValueMT","ProbabilityMT","FirstSeverityMT","PredictionValueLT","ProbabilityLT","FirstSeverityLT","overflow","FeatureImportance","maxHeight","maxWidth","marginTop"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport \"../GynTable/gyn.style.scss\";\nimport \"./condition.scss\";\nimport { DataTable } from \"primereact/datatable\";\nimport { MultiSelect } from \"primereact/multiselect\";\nimport { Column } from \"primereact/column\";\nimport env from \"../../evn\";\nimport { Calendar } from \"primereact/calendar\";\nimport { Button } from \"primereact/button\";\nimport MButton from \"@material-ui/core/Button\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport * as moment from \"moment\";\nimport Moment from \"react-moment\";\nimport \"react-perfect-scrollbar/dist/css/styles.css\";\nimport MultiCascader from \"rsuite/lib/MultiCascader\";\nimport SettingsIcon from \"@material-ui/icons/Settings\";\nimport PerfectScrollbar from \"react-perfect-scrollbar\";\nimport { object } from \"prop-types\";\nimport * as Highcharts from \"highcharts\";\nimport HighchartsReact from \"highcharts-react-official\";\nimport Checkbox from \"../Checkbox/Checkbox\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport MuiDialogTitle from \"@material-ui/core/DialogTitle\";\nimport MuiDialogContent from \"@material-ui/core/DialogContent\";\nimport MuiDialogActions from \"@material-ui/core/DialogActions\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport CloseIcon from \"@material-ui/icons/Close\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport APIHelper from \"../../utils/apiHelper\";\nimport sample from \"../ConditionPredictionTable/sample.json\"\n\n// var MultiCascader = require('rsuite/lib/MultiCascader');\nconst styles = (theme) => ({\n  root: {\n    margin: 0,\n    padding: theme.spacing(2),\n  },\n  closeButton: {\n    position: \"absolute\",\n    right: theme.spacing(1),\n    top: theme.spacing(1),\n    color: theme.palette.grey[500],\n  },\n});\n\nconst DialogTitle = withStyles(styles)((props) => {\n  const { children, classes, onClose, ...other } = props;\n  return (\n    <MuiDialogTitle disableTypography className={classes.root} {...other}>\n      <Typography variant=\"h6\">{children}</Typography>\n      {onClose ? (\n        <IconButton\n          aria-label=\"close\"\n          className={classes.closeButton}\n          onClick={onClose}\n        >\n          <CloseIcon />\n        </IconButton>\n      ) : null}\n    </MuiDialogTitle>\n  );\n});\n\nconst DialogContent = withStyles((theme) => ({\n  root: {\n    padding: theme.spacing(2),\n  },\n}))(MuiDialogContent);\n\nconst DialogActions = withStyles((theme) => ({\n  root: {\n    margin: 0,\n    padding: theme.spacing(1),\n  },\n}))(MuiDialogActions);\n\nconst baseColStyle = {\n  textAlign: \"center\",\n  padding: \"1% !important\",\n  fontSize: \"0.7rem\",\n  position: \"relative\",\n};\n\nconst absCenter = {\n  position: \"absolute\",\n  left: 0,\n  right: 0,\n  margin: \"auto\",\n  width: \"33px\",\n  top: 0,\n  bottom: 0,\n  height: \"33px\",\n};\n\nconst BASE_URL = env.baseUrl;\nconst isProd = env.isProd;\n\n// DEMO DATA\nconst departmentData = [\n  { DepartmentCode: \"ICU\", Department: \"Intensive Care Unit\" },\n  { DepartmentCode: \"AC\", Department: \"Acute Care\" },\n  { DepartmentCode: \"CAR\", Department: \"Cardiology\" },\n];\nconst conditionData = sample;\n\nconst conditionList = [\n  {\n    ConditionICD10: \"070.30\",\n    Condition:\n      \"Hepatitis B virus infection Hepatitis B virus infection Hepatitis B virus infection Hepatitis B virus infection Hepatitis B virus infection Hepatitis B virus infection\",\n  },\n  { ConditionICD10: \"070.32\", Condition: \"Chronic hepatitis B\" },\n  { ConditionICD10: \"070.51\", Condition: \"Hep C w/o coma, acute/NOS\" },\n  { ConditionICD10: \"070.70\", Condition: \"Hepatitis-C\" },\n  { ConditionICD10: \"070.70\", Condition: \"Syphilis\" },\n  // {name: 'Paris', code: 'PRS'}\n];\n\nfunction addRows(n) {\n  for (let i = 0; i < n; i++) {\n    conditionData.push({\n      PatientMRN: 12345,\n      PatientFirstName: \"John\",\n      PatientLastName: \"Doe\",\n      ConditionType: \"Diabetes\",\n      Performance:\n        \"PERSONBLAT=0.97, AUC=0.95, TP=0.97, TN=0.96, F1=0.97, AUC=0.95, TP=0.97, TN=0.96 ,F1=0.97, AUC=0.95, TP=0.97, TN=0.96\",\n      Department: \"Acute Care\",\n      ActualResult: \"Positive\",\n      PredictionValue: 0,\n      Probability: 93,\n      ActualResultDate: \"10/3/1990\",\n      PredictionDate: \"10/3/1990\",\n      Probability: 87,\n    });\n  }\n}\n\n// addRows(50);\n\n// CHART OPTIONS\nconst options = {\n  title: {\n    display: true,\n    text: \"Projected distribution of conditions\",\n  },\n};\n\n// const getOptions = ({ title }) => ({\n//   title: {\n//     display: true,\n//     text: title,\n//   },\n// });\n\nfunction gradientColor(color) {\n  return {\n    radialGradient: {\n      cx: 0.5,\n      cy: 0.3,\n      r: 0.7,\n    },\n    stops: [\n      [0, color],\n      [1, Highcharts.color(color).brighten(-0.3).get(\"rgb\")], // darken\n    ],\n  };\n}\nfunction getOptions(title, data) {\n  console.log(data);\n  return {\n    chart: {\n      height: 265,\n      backgroundColor: \"transparent\",\n      plotBackgroundColor: null,\n      plotBorderWidth: null,\n      plotShadow: false,\n      type: \"pie\",\n      spacingTop: 0,\n      spacingRight: 0,\n      spacingBottom: 0,\n      spacingLeft: 0,\n      plotBorderWidth: 0,\n    },\n    title: {\n      text: null,\n      style: { color: \"#333333\", fontSize: \"13.5px\" },\n    },\n    tooltip: {\n      pointFormat: \" <b>{point.y}</b> ({point.percentage:.0f}%)\",\n    },\n    plotOptions: {\n      series: {\n        groupPadding: 0,\n      },\n      pie: {\n        //size: '200px',\n        // Set point padding to 0\n        pointPadding: 0,\n        // Set group padding to 0\n        groupPadding: 0,\n        allowPointSelect: true,\n        cursor: \"pointer\",\n        dataLabels: {\n          enabled: false,\n          format: \"<b>{point.name}</b>: {point.percentage:.1f} %\",\n          connectorColor: \"silver\",\n          distance: -15,\n        },\n        point: {\n          events: {\n            legendItemClick: function (a, b, c) {\n              if (\n                this.visible == true &&\n                (this.series.data.length == 1 ||\n                  this.series.data.length - 1 ==\n                  this.series.data.filter((a) => {\n                    return a.visible == false;\n                  }).length)\n              ) {\n                return false;\n              }\n              return true;\n            },\n          },\n        },\n      },\n    },\n    credits: {\n      enabled: false,\n    },\n    xAxis: {\n      lineWidth: 0,\n      visible: false,\n      startOnTick: false,\n      endOnTick: false,\n      minPadding: 0,\n      maxPadding: 0,\n    },\n    yAxis: {\n      lineWidth: 0,\n      visible: false,\n      startOnTick: false,\n      endOnTick: false,\n    },\n    accessibility: {\n      point: {\n        valueSuffix: \"%\",\n      },\n    },\n    series: [\n      {\n        name: \"Share\",\n        showInLegend: true,\n        data: data,\n      },\n    ],\n  };\n}\n\nconst columns = [\n  { label: \"Patient's MRN\", key: \"PatientMRN\", isSelected: true },\n  { label: \"Patient First Name\", key: \"PatientFirstName\", isSelected: true },\n  { label: \"Patient Last Name\", key: \"PatientLastName\", isSelected: true },\n  { label: \"Condition Type\", key: \"ConditionType\", isSelected: true },\n\n  //{ label: \"Prediction Value\", key: \"PredictionValue\", isSelected: true },\n  { label: \"Prediction, Severity (0-100%) - Short-Term\", key: \"PredictionValueST\", isSelected: true },\n  { label: \"Est. Risk Scale - Short-Term\", key: \"EstRiskScaleST\", isSelected: true },\n  {\n    label: \"First Prediction Date (Severity Short-Term)\",\n    key: \"FirstSeverityST\",\n    isSelected: true,\n  },\n\n  { label: \"Prediction, Severity (0-100%) - Mid-Term\", key: \"PredictionValueMT\", isSelected: true },\n  { label: \"Est. Risk Scale - Mid-Term\", key: \"EstRiskScaleMT\", isSelected: true },\n  {\n    label: \"First Prediction Date (Severity Mid-Term)\",\n    key: \"FirstSeverityMT\",\n    isSelected: true,\n  },\n\n\n  { label: \"Prediction, Severity (0-100%) - Long-Term\", key: \"PredictionValueLT\", isSelected: false },\n  { label: \"Est. Risk Scale - Long-Term\", key: \"EstRiskScaleLT\", isSelected: false },\n\n  {\n    label: \"First Prediction Date (Severity Long-Term)\",\n    key: \"FirstSeverityLT\",\n    isSelected: false,\n  },\n  // { label: \"Est. Risk Scale\", key: \"EstRiskScale\", isSelected: true },\n\n\n\n  // { label: \"Severity (0-100%)\", key: \"Probability\", isSelected: true },\n  { label: \"Updated Prediction Date\", key: \"PredictionDate\", isSelected: false },\n  //First Prediction Date (Severity)\n\n\n\n  {\n    label: \"Risk Factors (by SPAI)\",\n    key: \"FeatureImportance\",\n    isSelected: false,\n  },\n  { label: \"Performance\", key: \"Performance\", isSelected: false },\n  { label: \"Actual Result\", key: \"ActualResult\", isSelected: true },\n  { label: \"Actual Result Date\", key: \"ActualResultDate\", isSelected: true },\n  { label: \"Location\", key: \"Department\", isSelected: true },\n];\n\nconst defaultFilter = localStorage.getItem(\"conditions\");\n\nclass ConditionPredictionTable extends React.Component {\n  MAX_SELECTED = 10;\n  pageIndex = 0;\n  lastSearchUrl;\n  constructor(props) {\n    super(props);\n    this.state = {\n      openModel: false,\n      data: isProd ? [] : conditionData, // TODO : REMOVE IT\n      isAPICallRunning: false,\n      conditionTypeChartData: [],\n      actualResultChartData: [],\n      currSelected: null,\n      first: 0,\n      checkedItems: new Map(),\n      checkedColumns: {},\n      // conditionList: isProd ? [] : conditionList,\n      conditionList: [],\n      departmentList: [],\n      conditionFilter: defaultFilter ? JSON.parse(defaultFilter) : [],\n      departmentFilter: [],\n      fromFilter: null,\n      toFilter: null,\n      actualResultDateFilter: null,\n      predictionDateFilter: null,\n    };\n  }\n\n  componentDidMount() {\n    // init condition list\n    if (this.state.conditionList.length < 1) this.initConditionListMeta();\n    // init department list\n    if (!this.state.departmentList.length) this.initDepartmentList();\n\n    // mapping data for pie chart\n    this.initChartData(this.state.data);\n    this.prepareColumns();\n  }\n\n  // HELPERS\n  getDatesFilters() {\n    let dates = null;\n    // if fromDate and toDate is exist (the user select range)\n    if (this.state.fromFilter && this.state.toFilter) {\n      // set dates with format \"YYYY-MM-DD\" - it means YEAR-MONTH-DAY\n      dates = {\n        fromDate: moment(this.state.fromFilter).format(\"YYYY-MM-DD\").toString(),\n        toDate: moment(this.state.toFilter).format(\"YYYY-MM-DD\").toString(),\n      };\n    }\n    return dates;\n  }\n\n  initConditionListMeta() {\n    // TODO: MAKE SURE THAT IS THE URL\n    console.log(\"initConditionListMeta\");\n    const url = `/meta/list`;\n    // if (isProd) {\n    APIHelper(url).then((data) => {\n      // console.log(\"conditionList :\", data);\n      const formatedMenu = this.formatConditionListMenu(data);\n      this.setState({ conditionList: formatedMenu });\n    });\n    // }\n  }\n  // format the menu for conditionlist\n  // formatConditionListMenu = data => data.filter((v, i, a) => a.findIndex(t => (t.moduleType === v.moduleType)) === i)\n  //   .map(meta => ({\n  //     value: meta.moduletype,\n  //     label: meta.moduletype,\n  //     children: data.filter(v => v.moduletype === meta.moduletype).map(meta => ({ value: meta.ConditionICD10, label: meta.Condition }))\n  //   }));\n\n  formatConditionListMenu(data) {\n    var conditionList = [...new Set(data.map((item) => item.moduletype))];\n    return conditionList.map((m) => ({\n      value: m,\n      label: m,\n      children: data\n        .filter((v) => v.moduletype === m)\n        .map((meta) => ({ value: meta.ConditionICD10, label: meta.Condition })),\n    }));\n  }\n  initDepartmentList() {\n    const url = `/department/list`;\n    if (isProd) {\n      APIHelper(url).then((data) => {\n        console.log(\"departmentList :\", data);\n        this.setState({ departmentList: data });\n      });\n    } else {\n      APIHelper(url).then((data) => {\n        if (data && data.length && data.length > 0) {\n          console.log(\"departmentList :\", data);\n          this.setState({ departmentList: data });\n        }\n      });\n    }\n  }\n\n  datesBodyTemplate(rowData, key) {\n    return (\n      <>\n        {rowData[key] && (\n          <Moment format=\"YYYY/MM/DD HH:MM:SS\">{rowData[key]}</Moment>\n        )}\n      </>\n    );\n  }\n  datesBodyTemplateFroFirstPredection(rowData, key) {\n    return <>{rowData[key] && this.renderFirstPredection(rowData, key)}</>;\n  }\n  renderFirstPredection(rowData, key) {\n    return (\n      moment(rowData[key]).format(\"YYYY/MM/DD HH:MM:SS\").toString() +\n      (rowData[\"FirstSeverity\"]\n        ? \" (\" + rowData[\"FirstSeverity\"].toString() + \")\"\n        : \"\")\n    );\n  }\n\n  onFilterChange(e, filter) {\n    this.setState({ [filter]: e.value });\n  }\n\n  onSearch() {\n    // BUILD URL\n    let url = `/conditionprediction?`;\n\n    // handle conditions filters\n    const conditions = this.state.conditionFilter;\n    if (conditions.length > 0) {\n      const moduleTypes = [];\n      const conditionTypes = [];\n\n      conditions.forEach((condition) => {\n        const getModuleIndex = this.state.conditionList.findIndex(\n          (val) => val.value === condition\n        );\n\n        if (getModuleIndex !== -1) {\n          this.state.conditionList[getModuleIndex].children.forEach((val) => {\n            conditionTypes.push(val.value);\n          });\n          moduleTypes.push(condition);\n        } else {\n          const module = this.state.conditionList.filter((val) => {\n            return val.children.filter((v) => v.value === condition) !== -1;\n          });\n          if (module.length > 0) {\n            if (!moduleTypes.includes(module[0].value))\n              moduleTypes.push(module[0].value);\n\n            conditionTypes.push(condition);\n          }\n        }\n      });\n      localStorage.setItem(\"conditions\", JSON.stringify(conditions));\n      url += `moduleType=${moduleTypes.join(\n        \",\"\n      )}&conditionType=${conditionTypes.join(\",\")}&`;\n    }\n\n    // handle departments filters\n    const departments = this.state.departmentFilter.toString();\n    if (departments) url += `department=${departments}&`;\n\n    // handle dates filters\n    const dates = this.getDatesFilters();\n    if (dates) url += `startDate=${dates.fromDate}&endDate=${dates.toDate}`;\n\n    console.log(\"url :\", url);\n    this.lastSearchUrl = url;\n\n    this.pageIndex = 0;\n    url += `&page=${this.pageIndex}`;\n    // only for test here\n    if (isProd) {\n      this.setState({ isAPICallRunning: true });\n      // send request to the server\n      APIHelper(url)\n        .then((data) => {\n          this.setState({ isAPICallRunning: false });\n          if (data && !data.length) {\n            return;\n          }\n\n          // var lastData = { key: '', value: null }, o = null;\n          // data.map(d => {\n          //   o = data.filter(f => f.PatientMRN == d.PatientMRN && f.ConditionType == d.ConditionType && f.PredictionDate).sort((a, b) => b.PredictionDate - a.PredictionDate)[0];\n          //   if (o) {\n          //     d.FirstPredictionDate = o.PredictionDate;\n          //     d.FirstProbability = o.Probability ? \" (\" + o.Probability + \")\" : null;\n          //   }\n          // });\n\n          // get data from the server\n\n          //   data = data.map((o, index) => {\n          //     if (index == 0) o.EstRiskScale = \"low\";\n          //     else if (index == 1) o.EstRiskScale = \"medium high\";\n          //     else if (index == 2) o.EstRiskScale = \"high\";\n          //     else o.EstRiskScale = \"medium low\";\n          //     return o;\n          //   });\n          console.log(\"FILTERED DATA :\", data);\n          this.addCustomColumns(data);\n          this.setState({ data: data });\n          this.setState({ first: 0 });\n          this.initChartData(data);\n        })\n        .catch((err) => {\n          this.setState({ isAPICallRunning: false });\n          console.log(\" err :\", err);\n        });\n    } else {\n      this.setState({ isAPICallRunning: true });\n      setTimeout(() => {\n        this.setState({ isAPICallRunning: false });\n      }, 3000);\n    }\n  }\n  addCustomColumns(data) {\n    data.map((item) => {\n      if (!item) return;\n      \n      item.EstRiskScaleSTInNum  = this.getEstRiskScalOrder(item.EstRiskScaleST);\n      item.EstRiskScaleMTInNum  = this.getEstRiskScalOrder(item.EstRiskScaleMT);\n      item.EstRiskScaleLTInNum  = this.getEstRiskScalOrder(item.EstRiskScaleLT);\n    });\n  }\n  getEstRiskScalOrder(value) {\n    if (!value) return 1;\n\n    let ord = 1;\n    switch (value.toLocaleLowerCase()) {\n      case \"high\":\n        ord = 5;\n        break;\n      case \"medium high\":\n        ord = 4;\n        break;\n      case \"medium\":\n        ord = 3;\n        break;\n      case \"low medium\":\n      case \"medium low\":\n        ord = 2;\n        break;\n      case \"low\":\n        ord = 1;\n        break;\n      default:\n        break;\n    }\n    return ord;\n  }\n  initNextPageData() {\n    this.pageIndex++;\n    let url = `${this.lastSearchUrl}&page=${this.pageIndex}`;\n    console.log(\"url :\", url);\n    if (isProd) {\n      APIHelper(url).then((data) => {\n        this.setState({ data: this.state.data.concat(data) });\n      });\n    } else {\n      addRows(50);\n    }\n  }\n  setConditionFilter(c) { }\n  handleClickOpen() {\n    this.setState({ openModel: true });\n    this.prepareColumns();\n  }\n  handleClose(isSave) {\n    this.setState({ openModel: false });\n    if (isSave) {\n      this.saveColumns();\n    }\n  }\n  handleColumnChange(e) {\n    const item = e.target.name;\n    const isChecked = e.target.checked;\n    this.setState((prevState) => ({\n      checkedItems: prevState.checkedItems.set(item, isChecked),\n    }));\n  }\n  prepareColumns() {\n    var selectedColumns = localStorage.getItem(\"selected_columns_v3\");\n    if (selectedColumns) selectedColumns = JSON.parse(selectedColumns);\n    else selectedColumns = this.defaultColumns();\n\n    var checkMap = new Map();\n    for (const key in selectedColumns) {\n      checkMap.set(key, selectedColumns[key]);\n    }\n    this.setState({ checkedColumns: selectedColumns, checkedItems: checkMap });\n  }\n  saveColumns() {\n    var selectedColumns = this.defaultColumns();\n    this.state.checkedItems.forEach((value, key) => {\n      selectedColumns[key] = value;\n    });\n    this.setState({ checkedColumns: selectedColumns });\n    localStorage.setItem(\"selected_columns_v3\", JSON.stringify(selectedColumns));\n  }\n  defaultColumns() {\n    var selectedColumns = {};\n    columns.map((c) => {\n      selectedColumns[c.key] = c.isSelected;\n    });\n    return selectedColumns;\n  }\n  renderDateFilter(key) {\n    const onChange = (event) => {\n      this.dt.filter(event.value, key, \"equals\");\n      this.setState({ [key]: event.value });\n    };\n\n    const onClear = (event) => {\n      this.dt.filter(null, key, \"equals\");\n      this.setState({ [key]: null });\n    };\n    return (\n      <div style={{ display: \"flex\", alignItems: \"center\" }}>\n        <Calendar\n          value={this.state[key]}\n          onChange={onChange}\n          selectionMode=\"single\"\n          hideOnDateTimeSelect={true}\n          readOnlyInput={false}\n        />\n        {this.state[key] && <i onClick={onClear} className=\"pi pi-times\"></i>}\n      </div>\n    );\n  }\n\n  onCurrSelectedChanged(item) {\n    // get data for the over time graph (the line chart)\n    const dataForOverTime = this.state.data.filter(\n      (row) =>\n        row.PatientMRN === item.PatientMRN \n        //&& row.ConditionType === item.ConditionType #Commented On 14 Aug - Severity of Illness over time (per Condition-Patient) Changes\n    );\n    // set dataForOverTime in the parent component (App.js)\n    this.props.setProbabilityDataOverTime(dataForOverTime);\n    // set current selected in current component\n    this.setState({ currSelected: item });\n    // emit on selected change event in parent component\n  }\n\n  initChartData(data) {\n    const conditionTypeCounters = {};\n    const actualResultCounters = {};\n    data.map((item) => {\n      if (item.PredictionValueST == 1) {\n        if (!conditionTypeCounters[item.ConditionType])\n          conditionTypeCounters[item.ConditionType] = 0;\n        conditionTypeCounters[item.ConditionType]++;\n      }\n\n      if (item.ActualResult.toLowerCase() === \"positive\") {\n        if (!actualResultCounters[item.ConditionType])\n          actualResultCounters[item.ConditionType] = 0;\n        actualResultCounters[item.ConditionType]++;\n      }\n    });\n\n    console.log(\"counters :\", conditionTypeCounters);\n\n    const generateData = (counters, colors) => ({\n      labels: Object.keys(counters),\n      datasets: [\n        {\n          data: Object.values(counters),\n          backgroundColor: colors,\n          hoverBackgroundColor: colors,\n        },\n      ],\n    });\n\n    var conTypeColors = [\n      \"#33557f\",\n      \"#3a6090\",\n      \"#416b9f\",\n      \"#4773ab\",\n      \"#4c7cb8\",\n      \"#668cc2\",\n      \"#8ba3cc\",\n      \"#a3b5d4\",\n      \"#b9c6dd\",\n      \"#cdd5e7\",\n      \"#dfecf4\",\n      \"#ffffff\",\n    ];\n    var actualResulColor = [\n      \"#173057\",\n      \"#543b74\",\n      \"#92407d\",\n      \"#cd4975\",\n      \"#f4625e\",\n      \"#fe8e3a\",\n      \"#fec106\",\n      \"#a3b5d4\",\n      \"#b9c6dd\",\n      \"#cdd5e7\",\n      \"#dfecf4\",\n      \"#ffffff\",\n    ];\n    const conditionTypeChartData = [];\n    var i = 0;\n    for (const key in conditionTypeCounters) {\n      conditionTypeChartData.push({\n        name: key,\n        y: conditionTypeCounters[key],\n        color: gradientColor(conTypeColors[i]),\n        selected: i == 0,\n      });\n      i++;\n    }\n    i = 0;\n    const actualResultChartData = [];\n    for (const key in actualResultCounters) {\n      actualResultChartData.push({\n        name: key,\n        y: actualResultCounters[key],\n        color: gradientColor(actualResulColor[i]),\n        selected: i == 0,\n      });\n      i++;\n    }\n\n    this.setState({ conditionTypeChartData: conditionTypeChartData });\n    this.setState({ actualResultChartData: actualResultChartData });\n\n    console.log(\"conditionTypeChartData :\", conditionTypeChartData);\n    console.log(\"actualResultChartData :\", actualResultChartData);\n  }\n\n  formatPrediction(value) {\n    if (!value || typeof (value) != \"number\") return value;\n\n    return value.toFixed('1');\n  }\n\n  onPage(e) {\n    // {first: 55, rows: 5, page: 11, pageCount: 12}\n    // let isLastPage = e.page === e.pageCount - 1;\n\n    // if (isLastPage) {\n    //   //    need to load more data here;\n    //   this.initNextPageData();\n    // }\n    console.log(\"e :\", e);\n    this.setState({ first: e.first });\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <div className=\"gyn-table-container main-container\">\n          <div className=\"header\">\n            <h3>Profile Assessment driven by SPAI</h3>\n            <div style={{ display: \"flex\", alignItems: \"center\" }}>\n              <MultiCascader\n                data={this.state.conditionList}\n                style={{\n                  minWidth: \"250px\",\n                  position: \"relative\",\n                  marginRight: \"15px\",\n                }}\n                onChange={(conditionFilter) =>\n                  this.setState({ conditionFilter })\n                }\n                value={this.state.conditionFilter}\n              />\n              {/* <MultiSelect\n              value={this.state.conditionFilter}\n              options={this.state.conditionList}\n              onChange={(e) =>\n                e.value.length <= this.MAX_SELECTED &&\n                this.setState({ conditionFilter: e.value })\n              }\n              style={{ minWidth: \"250px\", position: \"relative\", marginRight: '15px' }}\n              filter={true}\n              maxSelectedLabels={2}\n              filterPlaceholder=\"Search\"\n              placeholder=\"Choose Conditions\"\n              optionLabel=\"Condition\"\n              optionValue=\"ConditionICD10\"\n            /> */}\n              <Calendar\n                value={this.state.fromFilter}\n                showTime\n                hideOnDateTimeSelect\n                style={{ marginRight: \"15px\" }}\n                onChange={(e) => this.onFilterChange(e, \"fromFilter\")}\n                placeholder={\"Date Range - From\"}\n              />\n              <Calendar\n                value={this.state.toFilter}\n                showTime\n                minDate={new Date(this.state.fromFilter)}\n                hideOnDateTimeSelect\n                style={{ marginRight: \"15px\" }}\n                onChange={(e) => this.onFilterChange(e, \"toFilter\")}\n                placeholder={\"Date Range - To\"}\n              />\n\n              <MultiSelect\n                value={this.state.departmentFilter}\n                options={this.state.departmentList}\n                onChange={(e) =>\n                  e.value.length <= this.MAX_SELECTED &&\n                  this.setState({ departmentFilter: e.value })\n                }\n                style={{ minWidth: \"12em\", marginRight: \"15px\" }}\n                filter={true}\n                maxSelectedLabels={2}\n                filterPlaceholder=\"Search\"\n                placeholder=\"Choose Departments\"\n                optionLabel=\"Department\"\n                optionValue=\"DepartmentCode\"\n              />\n              <Button\n                label=\"Search\"\n                style={{\n                  display: this.state.isAPICallRunning ? \"none\" : \"inline-flex\",\n                }}\n                onClick={() => {\n                  this.onSearch();\n                }}\n              />\n              <MButton\n                variant=\"contained\"\n                color=\"primary\"\n                className=\"btnProgress\"\n                style={{\n                  borderRadius: 3,\n                  textTransform: \"none\",\n                  marginLeft: \"5px\",\n                  opacity: \"0.7\",\n                  display: !this.state.isAPICallRunning\n                    ? \"none\"\n                    : \"inline-flex\",\n                }}\n              >\n                <CircularProgress color=\"primary\" size=\"1.5rem\" />\n                &nbsp;&nbsp;Processing..\n              </MButton>\n            </div>\n          </div>\n\n          <div className=\"content\" style={{ paddingTop: \"30px\" }}>\n            <div className=\"table\">\n              <a\n                onClick={(e) => this.handleClickOpen()}\n                className=\"float-right\"\n                style={{\n                  cursor: \"pointer\",\n                  display: \"inline-flex\",\n                  float: \"right\",\n                  clear: \"both\",\n                  marginBottom: \"5px\",\n                }}\n              >\n                <SettingsIcon style={{ width: \"18px\", height: \"17px\" }} />\n                &nbsp;Choose Columns\n              </a>\n\n              <DataTable\n                ref={(el) => (this.dt = el)}\n                value={this.state.data}\n                sortMode=\"multiple\"\n                selectionMode=\"single\"\n                multiSortMeta={[\n                  {\n                    field: \"PredictionDate\",\n                    order: -1,\n                  },\n                  {\n                    field: \"EstRiskScaleSTInNum\",\n                    order: -1,\n                  },\n                ]}\n                paginator\n                rows={5}\n                first={this.state.first}\n                sortX={true}\n                selection={this.state.currSelected}\n                onSelectionChange={(e) => this.onCurrSelectedChanged(e.value)}\n                onPage={(e) => this.onPage(e)}\n                emptyMessage=\"No Results found\"\n                currentPageReportTemplate=\"Showing {first} to {last} of {totalRecords} items\"\n                paginatorTemplate=\"FirstPageLink PrevPageLink PageLinks NextPageLink LastPageLink CurrentPageReport\"\n                rowsPerPageOptions={[5, 10, 25, 50]}\n              >\n                {this.state.checkedColumns &&\n                  this.state.checkedColumns.PatientMRN === true && (\n                    <Column\n                      field=\"PatientMRN\"\n                      sortField=\"PatientMRN\"\n                      filter\n                      header=\"Patient's MRN\"\n                      sortable\n                      style={baseColStyle}\n                    />\n                  )}\n\n                {this.state.checkedColumns &&\n                  this.state.checkedColumns.PatientFirstName === true && (\n                    <Column\n                      field=\"PatientFirstName\"\n                      filter\n                      header=\"Patient First Name\"\n                      sortable\n                      style={baseColStyle}\n                    />\n                  )}\n\n                {this.state.checkedColumns &&\n                  this.state.checkedColumns.PatientLastName === true && (\n                    <Column\n                      field=\"PatientLastName\"\n                      filter\n                      header=\"Patient Last Name\"\n                      sortable\n                      style={baseColStyle}\n                    />\n                  )}\n\n                {this.state.checkedColumns &&\n                  this.state.checkedColumns.ConditionType === true && (\n                    <Column\n                      field=\"ConditionType\"\n                      filter\n                      header=\"Condition Type\"\n                      sortable\n                      style={{ baseColStyle, width: \"150px\" }}\n                    />\n                  )}\n\n                {/* {this.state.checkedColumns &&\n                  this.state.checkedColumns.PredictionValue === true && (\n                    <Column\n                      field=\"PredictionValue\"\n                      filter\n                      header=\"Prediction Value\"\n                      sortable\n                      style={baseColStyle}\n                      allowOverflow={true}\n                      body={(rowData) => (\n                        <span\n                          className={`status-label status-${\n                            rowData.PredictionValue === 1\n                              ? \"positive\"\n                              : \"negative\"\n                          }`}\n                        >\n                          {rowData.PredictionValue}\n                        </span>\n                      )}\n                    />\n                  )} */}\n\n                {this.state.checkedColumns &&\n                  this.state.checkedColumns.PredictionValueST === true && (\n                    <Column\n                      field=\"PredictionValueST\"\n                      filter\n                      header=\"Prediction, Severity (0-100%) - Short-Term\"\n                      sortable\n                      style={{ baseColStyle, textAlign: 'center' }}\n                      allowOverflow={true}\n                      body={(rowData) => (\n                        <span style={{ width: '70px' }}>\n                          <span className={`status-label status-${rowData.PredictionValueST == 1 ? \"positive\" : \"negative\"}`}>{rowData.PredictionValueST}</span>\n                          <span style={{ width: '35px', fontWeight: \"bold\" }}>&nbsp;, {this.formatPrediction(rowData.ProbabilityST)}</span>\n                        </span>\n                      )}\n                    />\n                  )}\n\n                {this.state.checkedColumns &&\n                  this.state.checkedColumns.EstRiskScaleST === true && (\n                    <Column\n                      field=\"EstRiskScaleSTInNum\"\n                      filter\n                      header=\"Est. Risk Scale - Short-Term\"\n                      sortable\n                      style={{ baseColStyle, width: \"100px\" }}\n                      body={(rowData) => (\n                        <div>\n                          <span id={rowData.EstRiskScaleST && rowData.EstRiskScaleST.toLocaleLowerCase()} className={`est-risk-scale`} >\n                            <span className=\"spantext\">\n                              {rowData.EstRiskScaleST && rowData.EstRiskScaleST.toLocaleLowerCase()}\n                            </span>\n                          </span>\n                        </div>\n                      )}\n                    />\n                  )}\n\n                {this.state.checkedColumns && this.state.checkedColumns.FirstSeverityST === true && (\n                  <Column\n                    field=\"FirstSeverityST\"\n                    filter\n                    header=\"First Prediction Date (Severity Short-Term)\"\n                    sortable\n                    body={(rowData) => (\n                      <span>\n                        {rowData.FirstPreditionDate && moment(rowData.FirstPreditionDate).format(\"YYYY/MM/DD HH:MM:SS\").toString()}\n                        {rowData.FirstSeverityST && (\n                          <span><br />{' (' + rowData.FirstSeverityST + ')'}</span>\n                        )}\n                      </span>\n                    )}\n                    style={{ baseColStyle, width: \"150px\" }}\n                  />\n                )}\n\n\n\n                {this.state.checkedColumns &&\n                  this.state.checkedColumns.PredictionValueMT === true && (\n                    <Column\n                      field=\"PredictionValueMT\"\n                      filter\n                      header=\"Prediction, Severity (0-100%) - Mid-Term\"\n                      sortable\n                      style={{ baseColStyle, textAlign: 'center' }}\n                      allowOverflow={true}\n                      body={(rowData) => (\n                        <span style={{ width: '70px' }}>\n                          <span className={`status-label status-${rowData.PredictionValueMT == 1 ? \"positive\" : \"negative\"}`}>{rowData.PredictionValueMT}</span>\n                          <span style={{ width: '35px', fontWeight: \"bold\" }}>&nbsp;, {this.formatPrediction(rowData.ProbabilityMT)}</span>\n                        </span>\n                      )}\n                    />\n                  )}\n\n                {this.state.checkedColumns &&\n                  this.state.checkedColumns.EstRiskScaleMT === true && (\n                    <Column\n                      field=\"EstRiskScaleMTInNum\"\n                      filter\n                      header=\"Est. Risk Scale - Mid-Term\"\n                      sortable\n                      style={{ baseColStyle, width: \"100px\" }}\n                      body={(rowData) => (\n                        <div>\n                          <span id={rowData.EstRiskScaleMT && rowData.EstRiskScaleMT.toLocaleLowerCase()} className={`est-risk-scale`} >\n                            <span className=\"spantext\">\n                              {rowData.EstRiskScaleMT && rowData.EstRiskScaleMT.toLocaleLowerCase()}\n                            </span>\n                          </span>\n                        </div>\n                      )}\n                    />\n                  )}\n\n                {this.state.checkedColumns && this.state.checkedColumns.FirstSeverityMT === true && (\n                  <Column\n                    field=\"FirstSeverityMT\"\n                    filter\n                    header=\"First Prediction Date (Severity Mid-Term)\"\n                    sortable\n                    body={(rowData) => (\n                      <div>\n                        {rowData.FirstPreditionDate && moment(rowData.FirstPreditionDate).format(\"YYYY/MM/DD HH:MM:SS\").toString()}\n                        {rowData.FirstSeverityMT && (\n                          <span><br />{' (' + rowData.FirstSeverityMT + ')'}</span>\n                        )}\n                      </div>\n                    )}\n                    style={{ baseColStyle, width: \"150px\" }}\n                  />\n                )}\n\n\n                {this.state.checkedColumns &&\n                  this.state.checkedColumns.PredictionValueLT === true && (\n                    <Column\n                      field=\"PredictionValueLT\"\n                      filter\n                      header=\"Prediction, Severity (0-100%) - Long-Term\"\n                      sortable\n                      style={{ baseColStyle, textAlign: 'center' }}\n                      allowOverflow={true}\n                      body={(rowData) => (\n                        <span style={{ width: '70px' }}>\n                          <span className={`status-label status-${rowData.PredictionValueLT == 1 ? \"positive\" : \"negative\"}`}>{rowData.PredictionValueLT}</span>\n                          <span style={{ width: '35px', fontWeight: \"bold\" }}>&nbsp;, {this.formatPrediction(rowData.ProbabilityLT)}</span>\n                        </span>\n                      )}\n                    />\n                  )}\n\n\n\n                {this.state.checkedColumns &&\n                  this.state.checkedColumns.EstRiskScaleLT === true && (\n                    <Column\n                      field=\"EstRiskScaleLTInNum\"\n                      filter\n                      header=\"Est. Risk Scale - Long-Term\"\n                      sortable\n                      style={{ baseColStyle, width: \"100px\" }}\n                      body={(rowData) => (\n                        <div>\n                          <span id={rowData.EstRiskScaleLT && rowData.EstRiskScaleLT.toLocaleLowerCase()} className={`est-risk-scale`} >\n                            <span className=\"spantext\">\n                              {rowData.EstRiskScaleLT && rowData.EstRiskScaleLT.toLocaleLowerCase()}\n                            </span>\n                          </span>\n                        </div>\n                      )}\n                    />\n                  )}\n                {this.state.checkedColumns && this.state.checkedColumns.FirstSeverityLT === true && (\n                  <Column\n                    field=\"FirstSeverityLT\"\n                    filter\n                    header=\"First Prediction Date (Severity Long-Term)\"\n                    sortable\n                    body={(rowData) => (\n                      <span>\n                        {rowData.FirstPreditionDate && moment(rowData.FirstPreditionDate).format(\"YYYY/MM/DD HH:MM:SS\").toString()}\n                        {rowData.FirstSeverityLT && (\n                          <span><br />{' (' + rowData.FirstSeverityLT + ')'}</span>\n                        )}\n                      </span>\n                    )}\n                    style={{ baseColStyle, width: \"150px\" }}\n                  />\n                )}\n                {this.state.checkedColumns &&\n                  this.state.checkedColumns.PredictionDate === true && (\n                    <Column\n                      field=\"PredictionDate\"\n                      filter\n                      filterElement={this.renderDateFilter(\"PredictionDate\")}\n                      body={(rowData) =>\n                        this.datesBodyTemplate(rowData, \"PredictionDate\")\n                      }\n                      header=\"Updated Prediction Date\"\n                      sortable\n                      style={{ ...baseColStyle, overflow: \"inherit\" }}\n                    />\n                  )}\n\n\n\n\n                {this.state.checkedColumns &&\n                  this.state.checkedColumns.FeatureImportance === true && (\n                    <Column\n                      field=\"FeatureImportance\"\n                      filter\n                      body={(rowData) => (\n                        <PerfectScrollbar\n                          style={{ maxHeight: \"80px\", maxWidth: \"120px\" }}\n                        >\n                          {rowData.FeatureImportance}\n                        </PerfectScrollbar>\n                      )}\n                      header=\"Risk Factors (by SPAI)\"\n                      sortable\n                      style={{ ...baseColStyle, width: \"100px\" }}\n                    />\n                  )}\n\n                {this.state.checkedColumns &&\n                  this.state.checkedColumns.Performance === true && (\n                    <Column\n                      field=\"Performance\"\n                      filter\n                      body={(rowData) => (\n                        <PerfectScrollbar style={{ maxHeight: \"80px\" }}>\n                          {rowData.Performance}\n                        </PerfectScrollbar>\n                      )}\n                      header=\"Performance\"\n                      sortable\n                      style={{\n                        ...baseColStyle,\n                        overflow: \"scroll\",\n                        width: \"10%\",\n                      }}\n                    />\n                  )}\n\n                {this.state.checkedColumns &&\n                  this.state.checkedColumns.ActualResult === true && (\n                    <Column\n                      field=\"ActualResult\"\n                      filter\n                      header=\"Actual Result\"\n                      sortable\n                      style={{ ...baseColStyle, width: \"10%\" }}\n                      body={(rowData) => (\n                        <span\n                          className={`status-label status-${rowData.ActualResult &&\n                            rowData.ActualResult.toLocaleLowerCase()\n                            }`}\n                        >\n                          {rowData.ActualResult}\n                        </span>\n                      )}\n                    />\n                  )}\n\n                {this.state.checkedColumns &&\n                  this.state.checkedColumns.ActualResultDate === true && (\n                    <Column\n                      field=\"ActualResultDate\"\n                      filter\n                      filterElement={this.renderDateFilter(\"ActualResultDate\")}\n                      body={(rowData) =>\n                        this.datesBodyTemplate(rowData, \"ActualResultDate\")\n                      }\n                      header=\"Actual Result Date\"\n                      sortable\n                      style={{ ...baseColStyle, overflow: \"inherit\" }}\n                    />\n                  )}\n                {this.state.checkedColumns &&\n                  this.state.checkedColumns.Department === true && (\n                    <Column\n                      field=\"Department\"\n                      filter\n                      header=\"Location\"\n                      sortable\n                      style={baseColStyle}\n                    />\n                  )}\n              </DataTable>\n            </div>\n\n            <div className=\"chart\">\n              {/*Projected distribution of conditions*/}\n              {this.state.conditionTypeChartData &&\n                this.state.conditionTypeChartData.length > 0 && (\n                  <section style={{ width: \"100%\", position: \"relative\" }}>\n                    <h4 style={{ fontWeight: \"normal\", marginTop: \"2px\" }}>\n                      Projected distribution of conditions\n                    </h4>\n                    <div\n                      className=\"projected-distribution\"\n                      style={{ position: \"relative\" }}\n                    >\n                      <HighchartsReact\n                        highcharts={Highcharts}\n                        options={getOptions(\n                          \"Projected distribution of conditions\",\n                          this.state.conditionTypeChartData\n                        )}\n                      />\n                    </div>\n                  </section>\n                )}\n              {this.state.actualResultChartData.length > 0 && (\n                <section style={{ width: \"100%\", position: \"relative\" }}>\n                  <h4 style={{ fontWeight: \"normal\" }}>\n                    Actual Distribution of conditions\n                  </h4>\n                  <div\n                    className=\"actual-distribution\"\n                    style={{ position: \"relative\" }}\n                  >\n                    <HighchartsReact\n                      highcharts={Highcharts}\n                      options={getOptions(\n                        \"Actual Distribution of conditions\",\n                        this.state.actualResultChartData\n                      )}\n                    />\n                  </div>\n                </section>\n              )}\n              {/* <Chart\n              type=\"pie\"\n              width={\"100%\"}\n              data={this.state.actualResultChartData}\n              options={getOptions({\n                title: \"Actual Distribution of conditions\",\n              })}\n            /> */}\n            </div>\n          </div>\n        </div>\n        <Dialog\n          onClose={(e) => this.handleClose()}\n          aria-labelledby=\"customized-dialog-title\"\n          open={this.state.openModel}\n        >\n          <DialogTitle\n            id=\"customized-dialog-title\"\n            onClose={(e) => this.handleClose()}\n          >\n            Choose Columns\n          </DialogTitle>\n          <DialogContent dividers style={{ width: 400 }}>\n            {columns.map((item) => (\n              <label\n                key={item.key}\n                style={{ display: \"block\" }}\n                className=\"checkbox-list\"\n              >\n                <Checkbox\n                  name={item.key}\n                  checked={this.state.checkedItems.get(item.key)}\n                  onChange={(e) => this.handleColumnChange(e)}\n                />\n                <span>&nbsp;{item.label}</span>\n              </label>\n            ))}\n          </DialogContent>\n          <DialogActions>\n            <MButton onClick={(e) => this.handleClose(true)} color=\"primary\">\n              Save changes\n            </MButton>\n          </DialogActions>\n        </Dialog>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default ConditionPredictionTable;\n"]},"metadata":{},"sourceType":"module"}